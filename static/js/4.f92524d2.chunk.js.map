{"version":3,"sources":["components/MuteButton/MuteButton.tsx","components/Play/PlayButton.tsx","components/PlaybackRate/PlaybackRate.tsx","components/PlaybackRate/utils.ts","utils.ts","components/Seeker/ValueLabelComponent.tsx","components/Seeker/Seeker.tsx","components/Label/Label.tsx","components/Video/useStatistics.ts","components/StatisticsPanel/StatisticsPanel.tsx","components/StatisticsPanel/constants.ts","components/StatisticsButton/StatisticsButton.tsx","components/VideoControls/VideoControls.tsx","components/VideoTitle/VideoTitle.tsx","components/Video/handleVideoShortcuts.ts","components/Video/useKeyboardShortcuts.ts","components/Video/utils.ts","components/Video/Video.tsx","components/Video/usePause.ts","components/Video/useMute.ts","components/Video/useCurrentTime.ts","components/Video/usePlaybackRate.ts","components/Video/useWheelShortcuts.ts","App.tsx"],"names":["MuteButton","isMuted","toggleMuted","audibleIcon","useMemo","VolumeMute","VolumeUp","IconButton","aria-label","onClick","PlayButton","isPaused","togglePaused","playPauseIcon","PlayArrow","Pause","useStyles","makeStyles","root","padding","PlaybackRate","value","updateValue","styles","onChange","useCallback","e","currentTarget","onBlur","rate","parseFloat","isNaN","TextField","className","type","inputProps","step","getTime","Date","toISOString","substr","ValueLabelComponent","children","open","time","Tooltip","enterTouchDelay","placement","title","Seeker","currentTime","duration","updateCurrentTime","onRangeChange","Array","isArray","getValue","Slider","defaultValue","max","disabled","Label","theme","useTheme","Typography","style","color","palette","text","primary","Y_KEY","X_KEY","getMiddle","windowSize","panelHeight","panelWidth","halfPanelHeight","Math","floor","halfPanelWidth","halfWindowHeight","innerHeight","x","innerWidth","y","getKey","key","localStorage","getItem","float","StatisticsVisible","React","createContext","ToggleStatisticsVisible","StatisticsPosition","window","outerHeight","outerWidth","STATS_PANEL_HEIGHT","STATS_PANEL_WIDTH","UpdateStatisticsPosition","position","width","top","left","closeButton","StatisticsPanel","playbackRate","now","remainingTime","remainingAtRate","watchStartTime","nodeRef","useRef","isVisible","useContext","toggleIsVisible","updatePosition","useWindowSize","useState","zIndex","setZIndex","useEffect","watchingFor","onStop","current","getBoundingClientRect","bounds","ref","Card","opacity","CardContent","Close","Table","size","TableBody","TableRow","TableCell","dateTime","d","setUTCMilliseconds","moment","format","getEpochTimeString","StatisticsButton","icon","CancelPresentation","PresentToAll","VIDEO_CONTROLS_HEIGHT","height","display","alignContent","flexDirection","seeker","alignItems","justifyContent","interactiveRoot","interactiveRootLeft","VideoControls","updatePlaybackRate","isStatsVisible","toggleIsStatsVisible","setTime","setNow","setRemainingTime","setRemainingAtRate","remaining","interval","setInterval","clearInterval","VideoTitle","variant","keyboardMatch","shortcut","ctrlKey","useKeyboardShortcuts","addToCurrentTime","addToPlaybackRate","selectSrc","keyboardShortcuts","onKeyDown","shortcuts","preventDefault","handleKeyboardShortcuts","video","Video","src","videoRef","setWatchStartTime","isVideoLoaded","setIsVideoLoaded","setDuration","videoLoaded","setIsPaused","play","pause","onPause","onPlay","usePause","setIsMuted","useMute","setCurrentTime","isEvent","delta","onTimeUpdate","useCurrentTime","setPlaybackRate","recvValueStr","newValueStr","valueNumber","toString","setItem","ceil","round","usePlaybackRate","setIsStatsVisible","getPosition","oldPosition","getPositionInsideView","setPosition","newPosition","useStatistics","statsPosition","updateStatsPosition","useEventListener","document","onWheel","wheelShortcuts","val","deltaX","deltaY","handleWheelShortcuts","useWheelShortcuts","passive","onLoadedMetadata","muted","Provider","App","prefersDarkMode","useMediaQuery","createMuiTheme","setSrc","setTitle","inputRef","onSelectVideo","files","length","file","name","URL","revokeObjectURL","objectURL","createObjectURL","click","ThemeProvider","backgroundColor","background","default","accept"],"mappings":"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","file":"static/js/4.f92524d2.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport { VolumeMute, VolumeUp } from \"@material-ui/icons\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isMuted: boolean;\n  toggleMuted: () => void;\n}\n\nexport default function MuteButton({\n  isMuted,\n  toggleMuted,\n}: IPlayButton): JSX.Element {\n  const audibleIcon = useMemo(() => {\n    return isMuted ? <VolumeMute /> : <VolumeUp />;\n  }, [isMuted]);\n\n  return (\n    <IconButton aria-label=\"Toggle muted\" onClick={toggleMuted}>\n      {audibleIcon}\n    </IconButton>\n  );\n}\n","import { Pause, PlayArrow } from \"@material-ui/icons\";\nimport React, { useMemo } from \"react\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isPaused: boolean;\n  togglePaused: () => void;\n}\n\nexport default function PlayButton({\n  isPaused,\n  togglePaused,\n}: IPlayButton): JSX.Element {\n  const playPauseIcon = useMemo(() => {\n    return isPaused ? <PlayArrow /> : <Pause />;\n  }, [isPaused]);\n\n  return (\n    <IconButton aria-label=\"Toggle paused\" onClick={togglePaused}>\n      {playPauseIcon}\n    </IconButton>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { TextField, makeStyles } from \"@material-ui/core\";\n\nimport { PLAYBACKRATE_STEP } from \"./utils\";\n\nexport interface IPlaybackRate {\n  value: string;\n  updateValue: (value: string) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 16,\n  },\n});\n\nexport default function PlaybackRate({\n  value,\n  updateValue,\n}: IPlaybackRate): JSX.Element {\n  const styles = useStyles();\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n      updateValue(e.currentTarget.value);\n    },\n    [updateValue]\n  );\n\n  const onBlur = useCallback(() => {\n    const rate = parseFloat(value);\n    if (isNaN(rate)) {\n      updateValue(\"1.0\");\n    }\n  }, [updateValue, value]);\n\n  return (\n    <TextField\n      className={styles.root}\n      aria-label=\"Video playback rate\"\n      type=\"number\"\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      inputProps={{\n        step: PLAYBACKRATE_STEP,\n        \"aria-label\": \"Video playback rate\",\n      }}\n    />\n  );\n}\n","export const PLAYBACKRATE_SCALE = 10;\nexport const PLAYBACKRATE_STEP = 0.1 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MIN = 0.4 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MAX = 3 * PLAYBACKRATE_SCALE;\n\nexport function roundPlaybackRate(value: number) {\n  let valueStr = value.toString();\n  return valueStr;\n}\n","import moment from \"moment\";\n\n/**\n * Gets the time as a string from the number of seconds.\n * @param value Number of seconds\n */\nexport function getTime(value: number) {\n  return new Date(value * 1000).toISOString().substr(11, 8);\n}\n\n/**\n * Gets the time as a string of the datetime from the number of milliseconds\n * from the UNIX epoch.\n * @param dateTime The number of milliseconds from the UNIX epoch.\n */\nexport function getEpochTimeString(dateTime: number): string {\n  const d = new Date(0);\n  d.setUTCMilliseconds(dateTime);\n  return moment(d).format(\"HH:MM:SS\");\n}\n","import React from \"react\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\n\nexport interface IValueLabelComponentProps {\n  children: React.ReactElement;\n  open: boolean;\n  value: number;\n}\n\nexport default function ValueLabelComponent({\n  children,\n  open,\n  value,\n}: IValueLabelComponentProps): JSX.Element {\n  const time = getTime(value);\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={time}>\n      {children}\n    </Tooltip>\n  );\n}\n","import React, { useCallback } from \"react\";\n\nimport { Slider } from \"@material-ui/core\";\nimport ValueLabelComponent from \"./ValueLabelComponent\";\n\nexport interface ISeeker {\n  className?: string;\n  currentTime: number;\n  duration: number;\n  updateCurrentTime: (value: number) => void;\n}\n\nfunction getValue(value: number | number[]) {\n  if (Array.isArray(value)) {\n    return value[0] || 0;\n  }\n  return value;\n}\n\nexport default function Seeker({\n  className,\n  currentTime,\n  duration,\n  updateCurrentTime,\n}: ISeeker): JSX.Element {\n  const onRangeChange = useCallback(\n    (e: any, value: number | number[]) => {\n      updateCurrentTime(getValue(value));\n    },\n    [updateCurrentTime]\n  );\n\n  return (\n    <Slider\n      className={className}\n      value={currentTime}\n      defaultValue={0}\n      max={duration}\n      onChange={onRangeChange}\n      disabled={duration === 0}\n      ValueLabelComponent={ValueLabelComponent}\n    />\n  );\n}\n","import { Typography, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface ILabel {\n  children: string | string[];\n}\n\nexport default function Label({ children }: ILabel): JSX.Element {\n  const theme = useTheme();\n\n  return (\n    <Typography style={{ color: theme.palette.text.primary, padding: 8 }}>\n      {children}\n    </Typography>\n  );\n}\n","import { STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH } from \"../StatisticsPanel\";\nimport { useCallback, useState } from \"react\";\nimport useWindowSize, { WindowSize } from \"@rehooks/window-size\";\n\nimport React from \"react\";\n\nconst Y_KEY = \"statistics.position.y\";\nconst X_KEY = \"statistics.position.x\";\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nconst getMiddle = (\n  windowSize: WindowSize,\n  panelHeight: number,\n  panelWidth: number\n): Position => {\n  const halfPanelHeight = Math.floor(panelHeight / 2);\n  const halfPanelWidth = Math.floor(panelWidth / 2);\n\n  const halfWindowHeight = Math.floor(windowSize.innerHeight / 2);\n  const halfWindowWidth = Math.floor(windowSize.innerWidth / 2);\n\n  return {\n    x: halfWindowWidth - halfPanelWidth,\n    y: halfWindowHeight - halfPanelHeight,\n  };\n};\n\nconst getKey = (key: string): number | null => {\n  const value = localStorage.getItem(key);\n  if (value === null) {\n    return null;\n  }\n\n  const float = parseFloat(value);\n  if (isNaN(float)) {\n    return null;\n  }\n\n  return float;\n};\n\n/**\n * Makes sure that the position is inside the current window.\n * @param windowSize Current window size\n * @param panelHeight The height of the settings pane\n * @param panelWidth The width of the settings pane\n * @param position The current position of the settings pane\n */\nconst getPositionInsideView = (\n  { innerHeight, innerWidth }: WindowSize,\n  panelHeight: number,\n  panelWidth: number,\n  position: Position\n) => {\n  if (position.y < 0) {\n    // Above\n    position.y = 0;\n  } else if (position.y + panelHeight > innerHeight) {\n    // Bottom\n    position.y = innerHeight - panelHeight;\n  }\n\n  if (position.x < 0) {\n    // Left\n    position.x = 0;\n  } else if (position.x + panelWidth > innerWidth) {\n    // Right\n    position.x = innerWidth - panelWidth;\n  }\n\n  return position;\n};\n\nexport default function useStatistics(panelHeight: number, panelWidth: number) {\n  // Visibility\n  const [isStatsVisible, setIsStatsVisible] = useState(true);\n\n  const toggleIsStatsVisible = useCallback(() => {\n    setIsStatsVisible(!isStatsVisible);\n  }, [isStatsVisible]);\n\n  // Location\n  const windowSize = useWindowSize();\n\n  /**\n   * Gets the stored position, and returns a valid position (within the window).\n   * @param oldPosition Previous position. When this is provided, localStorage\n   * lookup will not be done.\n   */\n  const getPosition = useCallback(\n    (oldPosition?: Partial<Position>): Position => {\n      const x = oldPosition?.x ?? getKey(X_KEY);\n      const y = oldPosition?.y ?? getKey(Y_KEY);\n\n      if (y === null || x === null) {\n        const position = getMiddle(windowSize, panelHeight, panelWidth);\n        return position;\n      }\n\n      return getPositionInsideView(windowSize, panelHeight, panelWidth, {\n        y,\n        x,\n      });\n    },\n    [windowSize, panelHeight, panelWidth]\n  );\n\n  const [position, setPosition] = useState<Position>(getPosition());\n\n  /**\n   * Updates the position based on movement or window resizing. The new position\n   * is stored inside both localStorage and React state.\n   * @param x The new x position of the window. Not provided after window\n   * resizing.\n   * @param y The new y position of the window. Not provided after window\n   * resizing.\n   */\n  const updatePosition = useCallback(\n    (x?: number, y?: number) => {\n      const newPosition = getPosition({ x, y });\n      setPosition(newPosition);\n      localStorage.setItem(X_KEY, newPosition.x.toString());\n      localStorage.setItem(Y_KEY, newPosition.y.toString());\n    },\n    [getPosition]\n  );\n\n  return {\n    isStatsVisible,\n    toggleIsStatsVisible,\n    position,\n    updatePosition,\n  };\n}\n\nexport const StatisticsVisible = React.createContext(false);\nexport const ToggleStatisticsVisible = React.createContext(() => {});\n\nexport const StatisticsPosition = React.createContext(\n  getMiddle(\n    {\n      innerHeight: window.innerHeight,\n      innerWidth: window.innerWidth,\n      outerHeight: window.outerHeight,\n      outerWidth: window.outerWidth,\n    },\n    STATS_PANEL_HEIGHT,\n    STATS_PANEL_WIDTH\n  )\n);\nexport const UpdateStatisticsPosition = React.createContext(\n  (x?: number, y?: number) => {}\n);\n","import {\n  Card,\n  CardContent,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  makeStyles,\n} from \"@material-ui/core\";\nimport Draggable, { DraggableEvent } from \"react-draggable\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  StatisticsPosition,\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n  UpdateStatisticsPosition,\n} from \"../Video/useStatistics\";\nimport { getEpochTimeString, getTime } from \"../../utils\";\n\nimport { Close } from \"@material-ui/icons\";\nimport useWindowSize from \"@rehooks/window-size\";\n\nexport interface IStatisticsPanel {\n  time: string;\n  duration: string;\n  playbackRate: string;\n  now: number;\n  remainingTime: string;\n  remainingAtRate: string;\n  watchStartTime: number;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: \"absolute\",\n    width: 400,\n    top: 0,\n    left: 0,\n  },\n  closeButton: {\n    float: \"right\",\n  },\n});\n\nexport default function StatisticsPanel({\n  time,\n  duration,\n  playbackRate,\n  now,\n  remainingTime,\n  remainingAtRate,\n  watchStartTime,\n}: IStatisticsPanel): JSX.Element {\n  const styles = useStyles();\n  const nodeRef = useRef<HTMLSpanElement | null>(null);\n\n  const isVisible = useContext(StatisticsVisible);\n  const toggleIsVisible = useContext(ToggleStatisticsVisible);\n  const position = useContext(StatisticsPosition);\n  const updatePosition = useContext(UpdateStatisticsPosition);\n\n  const windowSize = useWindowSize();\n  const [zIndex, setZIndex] = useState(-1);\n\n  useEffect(() => {\n    if (isVisible) {\n      setZIndex(100);\n    } else {\n      setZIndex(-1);\n    }\n  }, [isVisible, position, zIndex]);\n\n  // Check if the panel needs to move when the window size changes\n  useEffect(() => {\n    updatePosition();\n  }, [updatePosition, windowSize]);\n\n  const watchingFor = useMemo(() => {\n    return getTime((now - watchStartTime) / 1000);\n  }, [now, watchStartTime]);\n\n  const onStop = useCallback(\n    (e: DraggableEvent) => {\n      if (nodeRef.current) {\n        const { top, left } = nodeRef.current.getBoundingClientRect();\n        updatePosition(left, top);\n      }\n    },\n    [updatePosition]\n  );\n\n  return (\n    <Draggable\n      nodeRef={nodeRef}\n      bounds=\"body\"\n      onStop={onStop}\n      position={position}\n    >\n      <span\n        ref={nodeRef}\n        className={styles.root}\n        style={{\n          zIndex,\n        }}\n      >\n        <Card style={{ opacity: 0.8 }}>\n          <CardContent>\n            <IconButton\n              aria-label=\"Close statistics panel\"\n              className={styles.closeButton}\n              onClick={toggleIsVisible}\n            >\n              <Close />\n            </IconButton>\n            <Table size=\"small\">\n              <TableBody>\n                <TableRow>\n                  <TableCell>Current time</TableCell>\n                  <TableCell>{time}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Duration</TableCell>\n                  <TableCell>{duration}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Playback rate</TableCell>\n                  <TableCell>{playbackRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining time</TableCell>\n                  <TableCell>{remainingTime}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining at ×{playbackRate}</TableCell>\n                  <TableCell>{remainingAtRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watch start time</TableCell>\n                  <TableCell>{getEpochTimeString(watchStartTime)}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watching for</TableCell>\n                  <TableCell>{watchingFor}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </span>\n    </Draggable>\n  );\n}\n","export const STATS_PANEL_HEIGHT = 319;\nexport const STATS_PANEL_WIDTH = 400;\n","import React, { useMemo } from \"react\";\nimport { CancelPresentation, PresentToAll } from \"@material-ui/icons\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IStatisticsButton {\n  isVisible: boolean;\n  toggleIsVisible: () => void;\n}\n\nexport default function StatisticsButton({\n  isVisible,\n  toggleIsVisible,\n}: IStatisticsButton): JSX.Element {\n  const icon = useMemo(() => {\n    return isVisible ? <CancelPresentation /> : <PresentToAll />;\n  }, [isVisible]);\n\n  return (\n    <IconButton aria-label=\"Toggle statistics\" onClick={toggleIsVisible}>\n      {icon}\n    </IconButton>\n  );\n}\n","import MuteButton from \"../MuteButton\";\nimport PlayButton from \"../Play\";\nimport PlaybackRate from \"../PlaybackRate\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Seeker from \"../Seeker\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\nimport Label from \"../Label\";\nimport StatisticsPanel from \"../StatisticsPanel\";\nimport StatisticsButton from \"../StatisticsButton\";\nimport {\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n} from \"../Video/useStatistics\";\n\nexport interface IVideoControls {\n  duration: number;\n  currentTime: number;\n  isPaused: boolean;\n  togglePaused: () => void;\n  isMuted: boolean;\n  toggleMuted: () => void;\n  updateCurrentTime: (value: number) => void;\n  playbackRate: string;\n  updatePlaybackRate: (value: string) => void;\n  watchStartTime: number;\n}\n\nconst height = 90;\nconst padding = 16;\nexport const VIDEO_CONTROLS_HEIGHT = `${padding * 2 + height}px`;\n\nconst useStyles = makeStyles({\n  root: {\n    height,\n    display: \"flex\",\n    alignContent: \"center\",\n    flexDirection: \"column\",\n    padding,\n  },\n  seeker: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRootLeft: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n\nexport default function VideoControls({\n  duration,\n  currentTime,\n  isPaused,\n  togglePaused,\n  isMuted,\n  toggleMuted,\n  updateCurrentTime,\n  playbackRate,\n  updatePlaybackRate,\n  watchStartTime,\n}: IVideoControls): JSX.Element {\n  const styles = useStyles();\n\n  const isStatsVisible = useContext(StatisticsVisible);\n  const toggleIsStatsVisible = useContext(ToggleStatisticsVisible);\n\n  const [time, setTime] = useState(\"00:00:00\");\n  const [now, setNow] = useState(0);\n  const [remainingTime, setRemainingTime] = useState(\"00:00:00\");\n  const [remainingAtRate, setRemainingAtRate] = useState(\"00:00:00\");\n\n  useEffect(() => {\n    setTime(getTime(currentTime));\n\n    const remaining = duration - currentTime;\n    setRemainingTime(getTime(remaining));\n\n    const rate = parseFloat(playbackRate) || 1;\n    setRemainingAtRate(getTime(remaining / rate));\n  }, [currentTime, duration, playbackRate, watchStartTime]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [watchStartTime]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.seeker}>\n        <Label>{time}</Label>\n        <Seeker\n          currentTime={currentTime}\n          duration={duration}\n          updateCurrentTime={updateCurrentTime}\n        />\n        <Label>\n          -{remainingTime}/{getTime(duration)}\n        </Label>\n      </div>\n\n      <div className={styles.interactiveRoot}>\n        <div className={styles.interactiveRootLeft}>\n          <PlayButton isPaused={isPaused} togglePaused={togglePaused} />\n          <MuteButton isMuted={isMuted} toggleMuted={toggleMuted} />\n          <StatisticsButton\n            isVisible={isStatsVisible}\n            toggleIsVisible={toggleIsStatsVisible}\n          />\n        </div>\n        <PlaybackRate value={playbackRate} updateValue={updatePlaybackRate} />\n      </div>\n      <StatisticsPanel\n        time={time}\n        duration={getTime(duration)}\n        playbackRate={playbackRate}\n        now={now}\n        remainingTime={remainingTime}\n        remainingAtRate={remainingAtRate}\n        watchStartTime={watchStartTime}\n      />\n    </div>\n  );\n}\n","import { Typography, makeStyles, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface IVideoTitle {\n  children?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: \"16px\",\n  },\n});\n\n// NOTE: this is hard coded according to Typography\nexport const VIDEO_TITLE_HEIGHT = \"64px\";\n\nexport default function VideoTitle({ children }: IVideoTitle): JSX.Element {\n  const theme = useTheme();\n  const styles = useStyles();\n\n  return (\n    <Typography\n      variant=\"h6\"\n      style={{ color: theme.palette.text.primary }}\n      className={styles.root}\n    >\n      {children || \"Open a video file (Ctrl + O)\"}\n    </Typography>\n  );\n}\n","export interface KeyboardShortcut {\n  key: string;\n  ctrlKey?: boolean;\n  onKeyDown: () => void;\n}\n\nfunction keyboardMatch(e: KeyboardEvent, shortcut: KeyboardShortcut): boolean {\n  return (\n    e.key === shortcut.key &&\n    (!shortcut.ctrlKey || e.ctrlKey === shortcut.ctrlKey)\n  );\n}\n\nexport function handleKeyboardShortcuts(\n  e: KeyboardEvent,\n  shortcuts: KeyboardShortcut[]\n) {\n  for (const shortcut of shortcuts) {\n    if (keyboardMatch(e, shortcut)) {\n      shortcut.onKeyDown();\n      e.preventDefault();\n      return;\n    }\n  }\n}\n\nexport interface WheelShortcuts {\n  x: (val: number) => void;\n  y: (val: number) => void;\n}\n\nexport function handleWheelShortcuts(e: WheelEvent, shortcuts: WheelShortcuts) {\n  if (e.deltaX) {\n    shortcuts.x(e.deltaX);\n  }\n\n  if (e.deltaY) {\n    shortcuts.y(e.deltaY);\n  }\n}\n","import {\n  KeyboardShortcut,\n  handleKeyboardShortcuts,\n} from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseKeyboardShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n  selectSrc: () => void;\n  toggleMuted: () => void;\n  togglePaused: () => void;\n  toggleIsStatsVisible: () => void;\n}\n\nexport default function useKeyboardShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n  selectSrc,\n  toggleMuted,\n  togglePaused,\n  toggleIsStatsVisible: toggleStatistics,\n}: IUseKeyboardShortcuts) {\n  const leftArrow = () => addToCurrentTime(-TRAVEL_DISTANCE);\n\n  const rightArrow = () => addToCurrentTime(TRAVEL_DISTANCE);\n\n  const upArrow = () => addToPlaybackRate(PLAYBACKRATE_STEP);\n\n  const downArrow = () => addToPlaybackRate(-PLAYBACKRATE_STEP);\n\n  const keyboardShortcuts: KeyboardShortcut[] = [\n    { key: \"m\", onKeyDown: toggleMuted },\n    { key: \" \", onKeyDown: togglePaused },\n    { key: \"o\", ctrlKey: true, onKeyDown: selectSrc },\n    { key: \"s\", onKeyDown: toggleStatistics },\n    { key: \"ArrowLeft\", onKeyDown: leftArrow },\n    { key: \"ArrowRight\", onKeyDown: rightArrow },\n    { key: \"ArrowUp\", onKeyDown: upArrow },\n    { key: \"ArrowDown\", onKeyDown: downArrow },\n  ];\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      handleKeyboardShortcuts(e, keyboardShortcuts);\n    },\n    [keyboardShortcuts]\n  );\n\n  return onKeyDown;\n}\n","export type Video = HTMLVideoElement | null;\nexport const TRAVEL_DISTANCE = 10;\n","import React, { useCallback, useRef, useState } from \"react\";\n\nimport { VIDEO_CONTROLS_HEIGHT } from \"../VideoControls/VideoControls\";\nimport { VIDEO_TITLE_HEIGHT } from \"../VideoTitle/VideoTitle\";\nimport VideoControls from \"../VideoControls\";\nimport VideoTitle from \"../VideoTitle\";\nimport { makeStyles } from \"@material-ui/core\";\nimport useCurrentTime from \"./useCurrentTime\";\nimport useEventListener from \"react-use-event-listener\";\nimport useKeyboardShortcuts from \"./useKeyboardShortcuts\";\nimport useMute from \"./useMute\";\nimport usePause from \"./usePause\";\nimport usePlaybackRate from \"./usePlaybackRate\";\nimport useWheelShortcuts from \"./useWheelShortcuts\";\nimport useStatistics, {\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n  StatisticsPosition,\n  UpdateStatisticsPosition,\n} from \"./useStatistics\";\nimport { STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH } from \"../StatisticsPanel\";\n\nexport interface IVideo {\n  src?: string;\n  selectSrc: () => void;\n  title?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    // width: \"100vw\",\n    height: \"100vh\",\n  },\n  video: {\n    height:\n      `calc(100vh - ${VIDEO_TITLE_HEIGHT} ` +\n      `- ${VIDEO_CONTROLS_HEIGHT} - 10px)`,\n    width: \"100vw\",\n  },\n});\n\nexport default function Video({ src, selectSrc, title }: IVideo): JSX.Element {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const styles = useStyles();\n\n  const [watchStartTime, setWatchStartTime] = useState(0);\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const [duration, setDuration] = useState(0);\n\n  const { isPaused, setIsPaused, togglePaused, onPause, onPlay } = usePause(\n    videoRef.current,\n    isVideoLoaded\n  );\n\n  const { isMuted, toggleMuted } = useMute(videoRef.current);\n\n  const {\n    currentTime,\n    onTimeUpdate,\n    updateCurrentTime,\n    addToCurrentTime,\n  } = useCurrentTime(videoRef.current, duration);\n\n  const {\n    playbackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  } = usePlaybackRate(videoRef.current);\n\n  const {\n    isStatsVisible,\n    toggleIsStatsVisible,\n    position: statsPosition,\n    updatePosition: updateStatsPosition,\n  } = useStatistics(STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH);\n\n  // Keyboard shortcuts\n  const onKeyDown = useKeyboardShortcuts({\n    addToCurrentTime,\n    addToPlaybackRate,\n    selectSrc,\n    toggleMuted,\n    togglePaused,\n    toggleIsStatsVisible,\n  });\n  useEventListener(\"keydown\", onKeyDown, document);\n\n  // Wheel shortcuts\n  const onWheel = useWheelShortcuts({ addToCurrentTime, addToPlaybackRate });\n  useEventListener(\"wheel\", onWheel, document, { passive: true });\n\n  // On loaded\n  const onLoadedMetadata = useCallback(() => {\n    const video = videoRef.current;\n    setIsVideoLoaded(true);\n    setDuration(video?.duration || 0);\n    setWatchStartTime(Date.now());\n\n    // Play\n    setIsPaused(false);\n    video?.play();\n\n    // Playback rate\n    const rate = parseFloat(playbackRate);\n    if (!isNaN(rate) && video) {\n      video.playbackRate = rate;\n    }\n  }, [playbackRate, setIsPaused]);\n\n  return (\n    <div className={styles.root}>\n      <VideoTitle>{title}</VideoTitle>\n      <video\n        className={styles.video}\n        ref={videoRef}\n        src={src}\n        muted={isMuted}\n        onLoadedMetadata={onLoadedMetadata}\n        onTimeUpdate={onTimeUpdate}\n        onPause={onPause}\n        onPlay={onPlay}\n      />\n      <StatisticsVisible.Provider value={isStatsVisible}>\n        <ToggleStatisticsVisible.Provider value={toggleIsStatsVisible}>\n          <StatisticsPosition.Provider value={statsPosition}>\n            <UpdateStatisticsPosition.Provider value={updateStatsPosition}>\n              <VideoControls\n                isPaused={isPaused}\n                togglePaused={togglePaused}\n                isMuted={isMuted}\n                toggleMuted={toggleMuted}\n                duration={duration}\n                currentTime={currentTime}\n                updateCurrentTime={updateCurrentTime}\n                playbackRate={playbackRate}\n                updatePlaybackRate={updatePlaybackRate}\n                watchStartTime={watchStartTime}\n              />\n            </UpdateStatisticsPosition.Provider>\n          </StatisticsPosition.Provider>\n        </ToggleStatisticsVisible.Provider>\n      </StatisticsVisible.Provider>\n    </div>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function usePause(video: Video, videoLoaded: boolean) {\n  const [isPaused, setIsPaused] = useState(true);\n\n  const togglePaused = useCallback(() => {\n    if (video && videoLoaded) {\n      if (isPaused) {\n        video.play();\n      } else {\n        video.pause();\n      }\n      setIsPaused(!isPaused);\n    }\n  }, [isPaused, video, videoLoaded]);\n\n  const onPause = useCallback(() => {\n    setIsPaused(true);\n  }, []);\n\n  const onPlay = useCallback(() => {\n    setIsPaused(false);\n  }, []);\n\n  return { isPaused, setIsPaused, togglePaused, onPause, onPlay };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function useMute(video: Video) {\n  const [isMuted, setIsMuted] = useState(false);\n\n  const toggleMuted = useCallback(() => {\n    setIsMuted(!isMuted);\n  }, [isMuted]);\n\n  return { isMuted, setIsMuted, toggleMuted };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function useCurrentTime(video: Video, duration: number) {\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const updateCurrentTime = useCallback(\n    (value: number, isEvent = false) => {\n      if (video && !isEvent) {\n        video.currentTime = value;\n      }\n      setCurrentTime(value);\n    },\n    [video]\n  );\n\n  const addToCurrentTime = useCallback(\n    (delta: number) => {\n      if (video) {\n        let value = video.currentTime + delta;\n\n        if (value < 0) {\n          value = 0;\n        } else if (value > duration) {\n          value = duration;\n        }\n\n        updateCurrentTime(value);\n      }\n    },\n    [duration, updateCurrentTime, video]\n  );\n\n  const onTimeUpdate = useCallback(() => {\n    const time = video?.currentTime;\n    if (time) {\n      updateCurrentTime(time, true);\n    }\n  }, [updateCurrentTime, video]);\n\n  return {\n    currentTime,\n    setCurrentTime,\n    updateCurrentTime,\n    addToCurrentTime,\n    onTimeUpdate,\n  };\n}\n","import { PLAYBACKRATE_MAX, PLAYBACKRATE_MIN } from \"../PlaybackRate\";\nimport { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\nimport { roundPlaybackRate, PLAYBACKRATE_SCALE } from \"../PlaybackRate/utils\";\n\nconst PLAYBACK_RATE = \"PLAYBACK_RATE\";\n\nexport default function usePlaybackRate(video: Video) {\n  const [playbackRate, setPlaybackRate] = useState(\n    localStorage.getItem(PLAYBACK_RATE) || \"1.0\"\n  );\n\n  /**\n   * @param valueStr Receives the real playback rate value\n   */\n  const updatePlaybackRate = useCallback(\n    (recvValueStr: string) => {\n      let valueNumber = parseFloat(recvValueStr) * PLAYBACKRATE_SCALE;\n      let newValueStr: string;\n\n      if (isNaN(valueNumber)) {\n        newValueStr = \"\";\n      } else {\n        if (valueNumber < PLAYBACKRATE_MIN) {\n          valueNumber = PLAYBACKRATE_MIN;\n        } else if (valueNumber > PLAYBACKRATE_MAX) {\n          valueNumber = PLAYBACKRATE_MAX;\n        }\n\n        valueNumber /= PLAYBACKRATE_SCALE;\n        newValueStr = roundPlaybackRate(valueNumber);\n\n        if (video) {\n          video.playbackRate = valueNumber;\n        }\n      }\n\n      setPlaybackRate(newValueStr);\n      localStorage.setItem(PLAYBACK_RATE, newValueStr);\n    },\n    [video]\n  );\n\n  const addToPlaybackRate = useCallback(\n    (delta: number) => {\n      if (video) {\n        delta = Math.ceil(delta);\n        let value =\n          Math.round(video.playbackRate * PLAYBACKRATE_SCALE + delta) /\n          PLAYBACKRATE_SCALE;\n        updatePlaybackRate(value.toString());\n      }\n    },\n    [updatePlaybackRate, video]\n  );\n\n  return {\n    playbackRate,\n    setPlaybackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  };\n}\n","import { WheelShortcuts, handleWheelShortcuts } from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseWheelShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n}\n\nexport default function useWheelShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n}: IUseWheelShortcuts) {\n  const xWheel = useCallback(\n    (val: number) => {\n      addToCurrentTime(TRAVEL_DISTANCE * (val / 1000));\n    },\n    [addToCurrentTime]\n  );\n\n  const yWheel = useCallback(\n    (val: number) => {\n      addToPlaybackRate(PLAYBACKRATE_STEP * -(val / 100));\n    },\n    [addToPlaybackRate]\n  );\n\n  const wheelShortcuts: WheelShortcuts = {\n    x: xWheel,\n    y: yWheel,\n  };\n\n  const onWheel = useCallback(\n    (e: WheelEvent) => {\n      handleWheelShortcuts(e, wheelShortcuts);\n    },\n    [wheelShortcuts]\n  );\n\n  return onWheel;\n}\n","import React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport {\n  ThemeProvider,\n  createMuiTheme,\n  useMediaQuery,\n} from \"@material-ui/core\";\n\nimport Video from \"./components/Video\";\n\nexport default function App(): JSX.Element {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  const [src, setSrc] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectVideo = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.currentTarget.files?.length) {\n        const file = e.currentTarget.files[0];\n        setTitle(file.name);\n        URL.revokeObjectURL(src);\n        const objectURL = URL.createObjectURL(file);\n        setSrc(objectURL);\n      }\n    },\n    [src]\n  );\n\n  const selectSrc = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ backgroundColor: theme.palette.background.default }}>\n        <input\n          aria-label=\"Press Ctrl+O to open a video from the local filesystem\"\n          ref={inputRef}\n          type=\"file\"\n          accept=\"video/*\"\n          onChange={onSelectVideo}\n          style={{ display: \"none\" }}\n        />\n        <Video src={src} selectSrc={selectSrc} title={title} />\n      </div>\n    </ThemeProvider>\n  );\n}\n"],"sourceRoot":""}