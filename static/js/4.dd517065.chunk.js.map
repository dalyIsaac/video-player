{"version":3,"sources":["components/MuteButton/MuteButton.tsx","components/Play/PlayButton.tsx","components/PlaybackRate/PlaybackRate.tsx","components/PlaybackRate/utils.ts","utils.ts","components/Seeker/ValueLabelComponent.tsx","components/Seeker/Seeker.tsx","components/Label/Label.tsx","components/StatisticsPanel/StatisticsPanel.tsx","components/StatisticsButton/StatisticsButton.tsx","components/VideoControls/VideoControls.tsx","components/VideoTitle/VideoTitle.tsx","components/Video/handleVideoShortcuts.ts","components/Video/useKeyboardShortcuts.ts","components/Video/utils.ts","components/Video/Video.tsx","components/Video/usePause.ts","components/Video/useMute.ts","components/Video/useCurrentTime.ts","components/Video/usePlaybackRate.ts","components/Video/useWheelShortcuts.ts","App.tsx"],"names":["MuteButton","isMuted","toggleMuted","audibleIcon","useMemo","VolumeMute","VolumeUp","IconButton","aria-label","onClick","PlayButton","isPaused","togglePaused","playPauseIcon","PlayArrow","Pause","useStyles","makeStyles","root","padding","PlaybackRate","value","updateValue","styles","onChange","useCallback","e","currentTarget","onBlur","rate","parseFloat","isNaN","TextField","className","type","inputProps","step","getTime","Date","toISOString","substr","ValueLabelComponent","children","open","time","Tooltip","enterTouchDelay","placement","title","Seeker","currentTime","duration","updateCurrentTime","onRangeChange","Array","isArray","getValue","Slider","defaultValue","max","disabled","Label","theme","useTheme","Typography","style","color","palette","text","primary","position","left","top","width","closeButton","float","StatisticsPanel","isVisible","toggleIsVisible","playbackRate","now","remainingTime","remainingAtRate","watchStartTime","nodeRef","useRef","zIndex","watchingFor","bounds","ref","Card","opacity","CardContent","Close","Table","size","TableBody","TableRow","TableCell","dateTime","d","setUTCMilliseconds","moment","format","getEpochTimeString","StatisticsButton","icon","CancelPresentation","PresentToAll","VIDEO_CONTROLS_HEIGHT","height","display","alignContent","flexDirection","seeker","alignItems","justifyContent","interactiveRoot","interactiveRootLeft","VideoControls","isStatsVisible","toggleIsStatsVisible","updatePlaybackRate","useState","setTime","setNow","setRemainingTime","setRemainingAtRate","useEffect","remaining","interval","setInterval","clearInterval","VideoTitle","variant","keyboardMatch","shortcut","key","ctrlKey","useKeyboardShortcuts","addToCurrentTime","addToPlaybackRate","selectSrc","keyboardShortcuts","onKeyDown","shortcuts","preventDefault","handleKeyboardShortcuts","video","Video","src","videoRef","setWatchStartTime","isVideoLoaded","setIsVideoLoaded","setDuration","videoLoaded","setIsPaused","play","pause","onPause","onPlay","usePause","current","setIsMuted","useMute","setCurrentTime","isEvent","delta","onTimeUpdate","useCurrentTime","setPlaybackRate","valueStr","toString","roundPlaybackRate","Math","ceil","round","usePlaybackRate","setIsStatsVisible","useEventListener","document","onWheel","wheelShortcuts","x","val","y","deltaX","deltaY","handleWheelShortcuts","useWheelShortcuts","passive","onLoadedMetadata","muted","App","prefersDarkMode","useMediaQuery","createMuiTheme","setSrc","setTitle","inputRef","onSelectVideo","files","length","file","name","URL","revokeObjectURL","objectURL","createObjectURL","click","ThemeProvider","backgroundColor","background","default","accept"],"mappings":"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","file":"static/js/4.dd517065.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport { VolumeMute, VolumeUp } from \"@material-ui/icons\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isMuted: boolean;\n  toggleMuted: () => void;\n}\n\nexport default function MuteButton({\n  isMuted,\n  toggleMuted,\n}: IPlayButton): JSX.Element {\n  const audibleIcon = useMemo(() => {\n    return isMuted ? <VolumeMute /> : <VolumeUp />;\n  }, [isMuted]);\n\n  return (\n    <IconButton aria-label=\"Toggle muted\" onClick={toggleMuted}>\n      {audibleIcon}\n    </IconButton>\n  );\n}\n","import { Pause, PlayArrow } from \"@material-ui/icons\";\nimport React, { useMemo } from \"react\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isPaused: boolean;\n  togglePaused: () => void;\n}\n\nexport default function PlayButton({\n  isPaused,\n  togglePaused,\n}: IPlayButton): JSX.Element {\n  const playPauseIcon = useMemo(() => {\n    return isPaused ? <PlayArrow /> : <Pause />;\n  }, [isPaused]);\n\n  return (\n    <IconButton aria-label=\"Toggle paused\" onClick={togglePaused}>\n      {playPauseIcon}\n    </IconButton>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { TextField, makeStyles } from \"@material-ui/core\";\n\nimport { PLAYBACKRATE_STEP } from \"./utils\";\n\nexport interface IPlaybackRate {\n  value: string;\n  updateValue: (value: string) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 16,\n  },\n});\n\nexport default function PlaybackRate({\n  value,\n  updateValue,\n}: IPlaybackRate): JSX.Element {\n  const styles = useStyles();\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n      updateValue(e.currentTarget.value);\n    },\n    [updateValue]\n  );\n\n  const onBlur = useCallback(() => {\n    const rate = parseFloat(value);\n    if (isNaN(rate)) {\n      updateValue(\"1.0\");\n    }\n  }, [updateValue, value]);\n\n  return (\n    <TextField\n      className={styles.root}\n      aria-label=\"Video playback rate\"\n      type=\"number\"\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      inputProps={{\n        step: PLAYBACKRATE_STEP,\n        \"aria-label\": \"Video playback rate\",\n      }}\n    />\n  );\n}\n","export const PLAYBACKRATE_SCALE = 10;\nexport const PLAYBACKRATE_STEP = 0.1 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MIN = 0.4 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MAX = 3 * PLAYBACKRATE_SCALE;\n\nexport function roundPlaybackRate(value: number) {\n  let valueStr = value.toString();\n  return valueStr;\n}\n","import moment from \"moment\";\n\n/**\n * Gets the time as a string from the number of seconds.\n * @param value Number of seconds\n */\nexport function getTime(value: number) {\n  return new Date(value * 1000).toISOString().substr(11, 8);\n}\n\n/**\n * Gets the time as a string of the datetime from the number of milliseconds\n * from the UNIX epoch.\n * @param dateTime The number of milliseconds from the UNIX epoch.\n */\nexport function getEpochTimeString(dateTime: number): string {\n  const d = new Date(0);\n  d.setUTCMilliseconds(dateTime);\n  return moment(d).format(\"HH:MM:SS\");\n}\n","import React from \"react\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\n\nexport interface IValueLabelComponentProps {\n  children: React.ReactElement;\n  open: boolean;\n  value: number;\n}\n\nexport default function ValueLabelComponent({\n  children,\n  open,\n  value,\n}: IValueLabelComponentProps): JSX.Element {\n  const time = getTime(value);\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={time}>\n      {children}\n    </Tooltip>\n  );\n}\n","import React, { useCallback } from \"react\";\n\nimport { Slider } from \"@material-ui/core\";\nimport ValueLabelComponent from \"./ValueLabelComponent\";\n\nexport interface ISeeker {\n  className?: string;\n  currentTime: number;\n  duration: number;\n  updateCurrentTime: (value: number) => void;\n}\n\nfunction getValue(value: number | number[]) {\n  if (Array.isArray(value)) {\n    return value[0] || 0;\n  }\n  return value;\n}\n\nexport default function Seeker({\n  className,\n  currentTime,\n  duration,\n  updateCurrentTime,\n}: ISeeker): JSX.Element {\n  const onRangeChange = useCallback(\n    (e: any, value: number | number[]) => {\n      updateCurrentTime(getValue(value));\n    },\n    [updateCurrentTime]\n  );\n\n  return (\n    <Slider\n      className={className}\n      value={currentTime}\n      defaultValue={0}\n      max={duration}\n      onChange={onRangeChange}\n      disabled={duration === 0}\n      ValueLabelComponent={ValueLabelComponent}\n    />\n  );\n}\n","import { Typography, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface ILabel {\n  children: string | string[];\n}\n\nexport default function Label({ children }: ILabel): JSX.Element {\n  const theme = useTheme();\n\n  return (\n    <Typography style={{ color: theme.palette.text.primary, padding: 8 }}>\n      {children}\n    </Typography>\n  );\n}\n","import React, { useRef, useMemo } from \"react\";\nimport Draggable from \"react-draggable\";\nimport {\n  makeStyles,\n  Card,\n  CardContent,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  IconButton,\n} from \"@material-ui/core\";\nimport { getTime, getEpochTimeString } from \"../../utils\";\nimport { Close } from \"@material-ui/icons\";\n\nexport interface IStatisticsPanel {\n  time: string;\n  duration: string;\n  playbackRate: string;\n  now: number;\n  remainingTime: string;\n  remainingAtRate: string;\n  isVisible: boolean;\n  toggleIsVisible: () => void;\n  watchStartTime: number;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: \"absolute\",\n    left: 300,\n    top: 300,\n    width: 400,\n  },\n  closeButton: {\n    float: \"right\",\n  },\n});\n\nexport default function StatisticsPanel({\n  isVisible,\n  toggleIsVisible,\n  time,\n  duration,\n  playbackRate,\n  now,\n  remainingTime,\n  remainingAtRate,\n  watchStartTime,\n}: IStatisticsPanel): JSX.Element {\n  const styles = useStyles();\n  const nodeRef = useRef(null);\n\n  const zIndex = useMemo(() => {\n    if (isVisible) {\n      return 100;\n    }\n    return -1;\n  }, [isVisible]);\n\n  const watchingFor = useMemo(() => {\n    return getTime((now - watchStartTime) / 1000);\n  }, [now, watchStartTime]);\n\n  return (\n    <Draggable nodeRef={nodeRef} bounds=\"body\">\n      <span ref={nodeRef} className={styles.root} style={{ zIndex }}>\n        <Card style={{ opacity: 0.8 }}>\n          <CardContent>\n            <IconButton\n              aria-label=\"Close statistics panel\"\n              className={styles.closeButton}\n              onClick={toggleIsVisible}\n            >\n              <Close />\n            </IconButton>\n            <Table size=\"small\">\n              <TableBody>\n                <TableRow>\n                  <TableCell>Current time</TableCell>\n                  <TableCell>{time}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Duration</TableCell>\n                  <TableCell>{duration}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Playback rate</TableCell>\n                  <TableCell>{playbackRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining time</TableCell>\n                  <TableCell>{remainingTime}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining at ×{playbackRate}</TableCell>\n                  <TableCell>{remainingAtRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watch start time</TableCell>\n                  <TableCell>{getEpochTimeString(watchStartTime)}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watching for</TableCell>\n                  <TableCell>{watchingFor}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </span>\n    </Draggable>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { CancelPresentation, PresentToAll } from \"@material-ui/icons\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IStatisticsButton {\n  isVisible: boolean;\n  toggleIsVisible: () => void;\n}\n\nexport default function StatisticsButton({\n  isVisible,\n  toggleIsVisible,\n}: IStatisticsButton): JSX.Element {\n  const icon = useMemo(() => {\n    return isVisible ? <CancelPresentation /> : <PresentToAll />;\n  }, [isVisible]);\n\n  return (\n    <IconButton aria-label=\"Toggle statistics\" onClick={toggleIsVisible}>\n      {icon}\n    </IconButton>\n  );\n}\n","import MuteButton from \"../MuteButton\";\nimport PlayButton from \"../Play\";\nimport PlaybackRate from \"../PlaybackRate\";\nimport React, { useState, useEffect } from \"react\";\nimport Seeker from \"../Seeker\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\nimport Label from \"../Label\";\nimport StatisticsPanel from \"../StatisticsPanel\";\nimport StatisticsButton from \"../StatisticsButton\";\n\nexport interface IVideoControls {\n  isStatsVisible: boolean;\n  toggleIsStatsVisible: () => void;\n  duration: number;\n  currentTime: number;\n  isPaused: boolean;\n  togglePaused: () => void;\n  isMuted: boolean;\n  toggleMuted: () => void;\n  updateCurrentTime: (value: number) => void;\n  playbackRate: string;\n  updatePlaybackRate: (value: string) => void;\n  watchStartTime: number;\n}\n\nconst height = 90;\nconst padding = 16;\nexport const VIDEO_CONTROLS_HEIGHT = `${padding * 2 + height}px`;\n\nconst useStyles = makeStyles({\n  root: {\n    height,\n    display: \"flex\",\n    alignContent: \"center\",\n    flexDirection: \"column\",\n    padding,\n  },\n  seeker: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRootLeft: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n\nexport default function VideoControls({\n  isStatsVisible,\n  toggleIsStatsVisible,\n  duration,\n  currentTime,\n  isPaused,\n  togglePaused,\n  isMuted,\n  toggleMuted,\n  updateCurrentTime,\n  playbackRate,\n  updatePlaybackRate,\n  watchStartTime,\n}: IVideoControls): JSX.Element {\n  const styles = useStyles();\n\n  const [time, setTime] = useState(\"00:00:00\");\n  const [now, setNow] = useState(0);\n  const [remainingTime, setRemainingTime] = useState(\"00:00:00\");\n  const [remainingAtRate, setRemainingAtRate] = useState(\"00:00:00\");\n\n  useEffect(() => {\n    setTime(getTime(currentTime));\n\n    const remaining = duration - currentTime;\n    setRemainingTime(getTime(remaining));\n\n    const rate = parseFloat(playbackRate) || 1;\n    setRemainingAtRate(getTime(remaining / rate));\n  }, [currentTime, duration, playbackRate, watchStartTime]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [watchStartTime]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.seeker}>\n        <Label>{time}</Label>\n        <Seeker\n          currentTime={currentTime}\n          duration={duration}\n          updateCurrentTime={updateCurrentTime}\n        />\n        <Label>\n          -{remainingTime}/{getTime(duration)}\n        </Label>\n      </div>\n\n      <div className={styles.interactiveRoot}>\n        <div className={styles.interactiveRootLeft}>\n          <PlayButton isPaused={isPaused} togglePaused={togglePaused} />\n          <MuteButton isMuted={isMuted} toggleMuted={toggleMuted} />\n          <StatisticsButton\n            isVisible={isStatsVisible}\n            toggleIsVisible={toggleIsStatsVisible}\n          />\n        </div>\n        <PlaybackRate value={playbackRate} updateValue={updatePlaybackRate} />\n      </div>\n      <StatisticsPanel\n        isVisible={isStatsVisible}\n        toggleIsVisible={toggleIsStatsVisible}\n        time={time}\n        duration={getTime(duration)}\n        playbackRate={playbackRate}\n        now={now}\n        remainingTime={remainingTime}\n        remainingAtRate={remainingAtRate}\n        watchStartTime={watchStartTime}\n      />\n    </div>\n  );\n}\n","import { Typography, makeStyles, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface IVideoTitle {\n  children?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: \"16px\",\n  },\n});\n\n// NOTE: this is hard coded according to Typography\nexport const VIDEO_TITLE_HEIGHT = \"64px\";\n\nexport default function VideoTitle({ children }: IVideoTitle): JSX.Element {\n  const theme = useTheme();\n  const styles = useStyles();\n\n  return (\n    <Typography\n      variant=\"h6\"\n      style={{ color: theme.palette.text.primary }}\n      className={styles.root}\n    >\n      {children || \"Open a video file (Ctrl + O)\"}\n    </Typography>\n  );\n}\n","export interface KeyboardShortcut {\n  key: string;\n  ctrlKey?: boolean;\n  onKeyDown: () => void;\n}\n\nfunction keyboardMatch(e: KeyboardEvent, shortcut: KeyboardShortcut): boolean {\n  return (\n    e.key === shortcut.key &&\n    (!shortcut.ctrlKey || e.ctrlKey === shortcut.ctrlKey)\n  );\n}\n\nexport function handleKeyboardShortcuts(\n  e: KeyboardEvent,\n  shortcuts: KeyboardShortcut[]\n) {\n  for (const shortcut of shortcuts) {\n    if (keyboardMatch(e, shortcut)) {\n      shortcut.onKeyDown();\n      e.preventDefault();\n      return;\n    }\n  }\n}\n\nexport interface WheelShortcuts {\n  x: (val: number) => void;\n  y: (val: number) => void;\n}\n\nexport function handleWheelShortcuts(e: WheelEvent, shortcuts: WheelShortcuts) {\n  if (e.deltaX) {\n    shortcuts.x(e.deltaX);\n  }\n\n  if (e.deltaY) {\n    shortcuts.y(e.deltaY);\n  }\n}\n","import {\n  KeyboardShortcut,\n  handleKeyboardShortcuts,\n} from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseKeyboardShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n  selectSrc: () => void;\n  toggleMuted: () => void;\n  togglePaused: () => void;\n  toggleIsStatsVisible: () => void;\n}\n\nexport default function useKeyboardShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n  selectSrc,\n  toggleMuted,\n  togglePaused,\n  toggleIsStatsVisible: toggleStatistics,\n}: IUseKeyboardShortcuts) {\n  const leftArrow = () => addToCurrentTime(-TRAVEL_DISTANCE);\n\n  const rightArrow = () => addToCurrentTime(TRAVEL_DISTANCE);\n\n  const upArrow = () => addToPlaybackRate(PLAYBACKRATE_STEP);\n\n  const downArrow = () => addToPlaybackRate(-PLAYBACKRATE_STEP);\n\n  const keyboardShortcuts: KeyboardShortcut[] = [\n    { key: \"m\", onKeyDown: toggleMuted },\n    { key: \" \", onKeyDown: togglePaused },\n    { key: \"o\", ctrlKey: true, onKeyDown: selectSrc },\n    { key: \"s\", onKeyDown: toggleStatistics },\n    { key: \"ArrowLeft\", onKeyDown: leftArrow },\n    { key: \"ArrowRight\", onKeyDown: rightArrow },\n    { key: \"ArrowUp\", onKeyDown: upArrow },\n    { key: \"ArrowDown\", onKeyDown: downArrow },\n  ];\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      handleKeyboardShortcuts(e, keyboardShortcuts);\n    },\n    [keyboardShortcuts]\n  );\n\n  return onKeyDown;\n}\n","export type Video = HTMLVideoElement | null;\nexport const TRAVEL_DISTANCE = 10;\n","import React, { useCallback, useRef, useState } from \"react\";\n\nimport { VIDEO_CONTROLS_HEIGHT } from \"../VideoControls/VideoControls\";\nimport { VIDEO_TITLE_HEIGHT } from \"../VideoTitle/VideoTitle\";\nimport VideoControls from \"../VideoControls\";\nimport VideoTitle from \"../VideoTitle\";\nimport { makeStyles } from \"@material-ui/core\";\nimport useCurrentTime from \"./useCurrentTime\";\nimport useEventListener from \"react-use-event-listener\";\nimport useKeyboardShortcuts from \"./useKeyboardShortcuts\";\nimport useMute from \"./useMute\";\nimport usePause from \"./usePause\";\nimport usePlaybackRate from \"./usePlaybackRate\";\nimport useWheelShortcuts from \"./useWheelShortcuts\";\n\nexport interface IVideo {\n  src?: string;\n  selectSrc: () => void;\n  title?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    // width: \"100vw\",\n    height: \"100vh\",\n  },\n  video: {\n    height:\n      `calc(100vh - ${VIDEO_TITLE_HEIGHT} ` +\n      `- ${VIDEO_CONTROLS_HEIGHT} - 10px)`,\n    width: \"100vw\",\n  },\n});\n\nexport default function Video({ src, selectSrc, title }: IVideo): JSX.Element {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const styles = useStyles();\n\n  const [watchStartTime, setWatchStartTime] = useState(0);\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const [duration, setDuration] = useState(0);\n\n  const { isPaused, setIsPaused, togglePaused, onPause, onPlay } = usePause(\n    videoRef.current,\n    isVideoLoaded\n  );\n\n  const { isMuted, toggleMuted } = useMute(videoRef.current);\n\n  const {\n    currentTime,\n    onTimeUpdate,\n    updateCurrentTime,\n    addToCurrentTime,\n  } = useCurrentTime(videoRef.current, duration);\n\n  const {\n    playbackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  } = usePlaybackRate(videoRef.current);\n\n  const [isStatsVisible, setIsStatsVisible] = useState(true);\n  const toggleIsStatsVisible = useCallback(() => {\n    setIsStatsVisible(!isStatsVisible);\n  }, [isStatsVisible]);\n\n  // Keyboard shortcuts\n  const onKeyDown = useKeyboardShortcuts({\n    addToCurrentTime,\n    addToPlaybackRate,\n    selectSrc,\n    toggleMuted,\n    togglePaused,\n    toggleIsStatsVisible,\n  });\n  useEventListener(\"keydown\", onKeyDown, document);\n\n  // Wheel shortcuts\n  const onWheel = useWheelShortcuts({ addToCurrentTime, addToPlaybackRate });\n  useEventListener(\"wheel\", onWheel, document, { passive: true });\n\n  // On loaded\n  const onLoadedMetadata = useCallback(() => {\n    const video = videoRef.current;\n    setIsVideoLoaded(true);\n    setDuration(video?.duration || 0);\n    setWatchStartTime(Date.now());\n\n    // Play\n    setIsPaused(false);\n    video?.play();\n\n    // Playback rate\n    const rate = parseFloat(playbackRate);\n    if (!isNaN(rate) && video) {\n      video.playbackRate = rate;\n    }\n  }, [playbackRate, setIsPaused]);\n\n  return (\n    <div className={styles.root}>\n      <VideoTitle>{title}</VideoTitle>\n      <video\n        className={styles.video}\n        ref={videoRef}\n        src={src}\n        muted={isMuted}\n        onLoadedMetadata={onLoadedMetadata}\n        onTimeUpdate={onTimeUpdate}\n        onPause={onPause}\n        onPlay={onPlay}\n      />\n      <VideoControls\n        isStatsVisible={isStatsVisible}\n        toggleIsStatsVisible={toggleIsStatsVisible}\n        isPaused={isPaused}\n        togglePaused={togglePaused}\n        isMuted={isMuted}\n        toggleMuted={toggleMuted}\n        duration={duration}\n        currentTime={currentTime}\n        updateCurrentTime={updateCurrentTime}\n        playbackRate={playbackRate}\n        updatePlaybackRate={updatePlaybackRate}\n        watchStartTime={watchStartTime}\n      />\n    </div>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function usePause(video: Video, videoLoaded: boolean) {\n  const [isPaused, setIsPaused] = useState(true);\n\n  const togglePaused = useCallback(() => {\n    if (video && videoLoaded) {\n      if (isPaused) {\n        video.play();\n      } else {\n        video.pause();\n      }\n      setIsPaused(!isPaused);\n    }\n  }, [isPaused, video, videoLoaded]);\n\n  const onPause = useCallback(() => {\n    setIsPaused(true);\n  }, []);\n\n  const onPlay = useCallback(() => {\n    setIsPaused(false);\n  }, []);\n\n  return { isPaused, setIsPaused, togglePaused, onPause, onPlay };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function useMute(video: Video) {\n  const [isMuted, setIsMuted] = useState(false);\n\n  const toggleMuted = useCallback(() => {\n    setIsMuted(!isMuted);\n  }, [isMuted]);\n\n  return { isMuted, setIsMuted, toggleMuted };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function useCurrentTime(video: Video, duration: number) {\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const updateCurrentTime = useCallback(\n    (value: number, isEvent = false) => {\n      if (video && !isEvent) {\n        video.currentTime = value;\n      }\n      setCurrentTime(value);\n    },\n    [video]\n  );\n\n  const addToCurrentTime = useCallback(\n    (delta: number) => {\n      if (video) {\n        let value = video.currentTime + delta;\n\n        if (value < 0) {\n          value = 0;\n        } else if (value > duration) {\n          value = duration;\n        }\n\n        updateCurrentTime(value);\n      }\n    },\n    [duration, updateCurrentTime, video]\n  );\n\n  const onTimeUpdate = useCallback(() => {\n    const time = video?.currentTime;\n    if (time) {\n      updateCurrentTime(time, true);\n    }\n  }, [updateCurrentTime, video]);\n\n  return {\n    currentTime,\n    setCurrentTime,\n    updateCurrentTime,\n    addToCurrentTime,\n    onTimeUpdate,\n  };\n}\n","import { PLAYBACKRATE_MAX, PLAYBACKRATE_MIN } from \"../PlaybackRate\";\nimport { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\nimport { roundPlaybackRate, PLAYBACKRATE_SCALE } from \"../PlaybackRate/utils\";\n\nexport default function usePlaybackRate(video: Video) {\n  const [playbackRate, setPlaybackRate] = useState(\"1.0\");\n\n  /**\n   * @param valueStr Receives the real playback rate value\n   */\n  const updatePlaybackRate = useCallback(\n    (valueStr: string) => {\n      let value = parseFloat(valueStr) * PLAYBACKRATE_SCALE;\n\n      if (isNaN(value)) {\n        setPlaybackRate(\"\");\n      } else {\n        if (value < PLAYBACKRATE_MIN) {\n          value = PLAYBACKRATE_MIN;\n        } else if (value > PLAYBACKRATE_MAX) {\n          value = PLAYBACKRATE_MAX;\n        }\n\n        value /= PLAYBACKRATE_SCALE;\n        valueStr = roundPlaybackRate(value);\n\n        setPlaybackRate(valueStr);\n\n        if (video) {\n          video.playbackRate = value;\n        }\n      }\n    },\n    [video]\n  );\n\n  const addToPlaybackRate = useCallback(\n    (delta: number) => {\n      if (video) {\n        delta = Math.ceil(delta);\n        let value =\n          Math.round(video.playbackRate * PLAYBACKRATE_SCALE + delta) /\n          PLAYBACKRATE_SCALE;\n        updatePlaybackRate(value.toString());\n      }\n    },\n    [updatePlaybackRate, video]\n  );\n\n  return {\n    playbackRate,\n    setPlaybackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  };\n}\n","import { WheelShortcuts, handleWheelShortcuts } from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseWheelShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n}\n\nexport default function useWheelShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n}: IUseWheelShortcuts) {\n  const xWheel = useCallback(\n    (val: number) => {\n      addToCurrentTime(TRAVEL_DISTANCE * (val / 1000));\n    },\n    [addToCurrentTime]\n  );\n\n  const yWheel = useCallback(\n    (val: number) => {\n      addToPlaybackRate(PLAYBACKRATE_STEP * -(val / 100));\n    },\n    [addToPlaybackRate]\n  );\n\n  const wheelShortcuts: WheelShortcuts = {\n    x: xWheel,\n    y: yWheel,\n  };\n\n  const onWheel = useCallback(\n    (e: WheelEvent) => {\n      handleWheelShortcuts(e, wheelShortcuts);\n    },\n    [wheelShortcuts]\n  );\n\n  return onWheel;\n}\n","import React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport {\n  ThemeProvider,\n  createMuiTheme,\n  useMediaQuery,\n} from \"@material-ui/core\";\n\nimport Video from \"./components/Video\";\n\nexport default function App(): JSX.Element {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  const [src, setSrc] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectVideo = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.currentTarget.files?.length) {\n        const file = e.currentTarget.files[0];\n        setTitle(file.name);\n        URL.revokeObjectURL(src);\n        const objectURL = URL.createObjectURL(file);\n        setSrc(objectURL);\n      }\n    },\n    [src]\n  );\n\n  const selectSrc = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ backgroundColor: theme.palette.background.default }}>\n        <input\n          aria-label=\"Press Ctrl+O to open a video from the local filesystem\"\n          ref={inputRef}\n          type=\"file\"\n          accept=\"video/*\"\n          onChange={onSelectVideo}\n          style={{ display: \"none\" }}\n        />\n        <Video src={src} selectSrc={selectSrc} title={title} />\n      </div>\n    </ThemeProvider>\n  );\n}\n"],"sourceRoot":""}