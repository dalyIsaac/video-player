{"version":3,"sources":["components/Video/useStatistics.ts","utils.ts","components/StatisticsPanel/StatisticsPanel.tsx","components/StatisticsPanel/constants.ts","components/MuteButton/MuteButton.tsx","components/Play/PlayButton.tsx","components/PlaybackRate/PlaybackRate.tsx","components/PlaybackRate/utils.ts","components/Seeker/ValueLabelComponent.tsx","components/Seeker/Seeker.tsx","components/Label/Label.tsx","components/StatisticsButton/StatisticsButton.tsx","components/VideoControls/VideoControls.tsx","components/VideoTitle/VideoTitle.tsx","components/Video/handleVideoShortcuts.ts","components/Video/useKeyboardShortcuts.ts","components/Video/utils.ts","components/Video/Video.tsx","components/Video/usePause.ts","components/Video/useMute.ts","components/Video/useCurrentTime.ts","components/Video/usePlaybackRate.ts","components/Video/useWheelShortcuts.ts","components/Video/useMediaSession.ts","App.tsx"],"names":["Y_KEY","X_KEY","getMiddle","windowSize","panelHeight","panelWidth","halfPanelHeight","Math","floor","halfPanelWidth","halfWindowHeight","innerHeight","x","innerWidth","y","getKey","key","value","localStorage","getItem","float","parseFloat","isNaN","StatisticsVisible","React","createContext","ToggleStatisticsVisible","StatisticsPosition","window","outerHeight","outerWidth","STATS_PANEL_HEIGHT","STATS_PANEL_WIDTH","UpdateStatisticsPosition","getTime","Date","toISOString","substr","useStyles","makeStyles","root","position","width","top","left","closeButton","StatisticsPanel","time","duration","playbackRate","now","remainingTime","remainingAtRate","watchStartTime","styles","nodeRef","useRef","isVisible","useContext","toggleIsVisible","updatePosition","useWindowSize","useState","zIndex","setZIndex","useEffect","watchingFor","useMemo","onStop","useCallback","e","current","getBoundingClientRect","bounds","ref","className","style","Card","opacity","CardContent","IconButton","aria-label","onClick","Close","Table","size","TableBody","TableRow","TableCell","dateTime","d","setUTCMilliseconds","moment","format","getEpochTimeString","MuteButton","isMuted","toggleMuted","audibleIcon","VolumeMute","VolumeUp","PlayButton","isPaused","togglePaused","playPauseIcon","PlayArrow","Pause","padding","PlaybackRate","updateValue","onChange","currentTarget","onBlur","rate","TextField","type","inputProps","step","ValueLabelComponent","children","open","Tooltip","enterTouchDelay","placement","title","Seeker","currentTime","updateCurrentTime","onRangeChange","Array","isArray","getValue","Slider","defaultValue","max","disabled","Label","theme","useTheme","Typography","color","palette","text","primary","StatisticsButton","icon","CancelPresentation","PresentToAll","VIDEO_CONTROLS_HEIGHT","height","display","alignContent","flexDirection","seeker","alignItems","justifyContent","interactiveRoot","interactiveRootLeft","VideoControls","updatePlaybackRate","isStatsVisible","toggleIsStatsVisible","setTime","setNow","setRemainingTime","setRemainingAtRate","remaining","interval","setInterval","clearInterval","VideoTitle","variant","keyboardMatch","shortcut","ctrlKey","useKeyboardShortcuts","addToCurrentTime","addToPlaybackRate","selectSrc","keyboardShortcuts","onKeyDown","shortcuts","preventDefault","handleKeyboardShortcuts","video","Video","src","videoRef","setWatchStartTime","isVideoLoaded","setIsVideoLoaded","setDuration","videoLoaded","setIsPaused","play","pause","onPause","onPlay","usePause","setIsMuted","useMute","setCurrentTime","isEvent","delta","onTimeUpdate","useCurrentTime","setPlaybackRate","recvValueStr","newValueStr","valueNumber","toString","setItem","ceil","round","usePlaybackRate","setIsStatsVisible","getPosition","oldPosition","getPositionInsideView","setPosition","newPosition","useStatistics","statsPosition","updateStatsPosition","useEventListener","document","onWheel","wheelShortcuts","val","deltaX","deltaY","handleWheelShortcuts","useWheelShortcuts","passive","metadata","onLoadedMetadata","eventSink","navigator","mediaSession","MediaMetadata","muted","onContextMenu","Provider","App","prefersDarkMode","useMediaQuery","createMuiTheme","setSrc","setTitle","inputRef","onSelectVideo","files","length","file","name","URL","revokeObjectURL","objectURL","createObjectURL","click","ThemeProvider","backgroundColor","background","default","accept"],"mappings":"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","file":"static/js/4.8730d4a5.chunk.js","sourcesContent":["import { STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH } from \"../StatisticsPanel\";\nimport { useCallback, useState } from \"react\";\nimport useWindowSize, { WindowSize } from \"@rehooks/window-size\";\n\nimport React from \"react\";\n\nconst Y_KEY = \"statistics.position.y\";\nconst X_KEY = \"statistics.position.x\";\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nconst getMiddle = (\n  windowSize: WindowSize,\n  panelHeight: number,\n  panelWidth: number\n): Position => {\n  const halfPanelHeight = Math.floor(panelHeight / 2);\n  const halfPanelWidth = Math.floor(panelWidth / 2);\n\n  const halfWindowHeight = Math.floor(windowSize.innerHeight / 2);\n  const halfWindowWidth = Math.floor(windowSize.innerWidth / 2);\n\n  return {\n    x: halfWindowWidth - halfPanelWidth,\n    y: halfWindowHeight - halfPanelHeight,\n  };\n};\n\nconst getKey = (key: string): number | null => {\n  const value = localStorage.getItem(key);\n  if (value === null) {\n    return null;\n  }\n\n  const float = parseFloat(value);\n  if (isNaN(float)) {\n    return null;\n  }\n\n  return float;\n};\n\n/**\n * Makes sure that the position is inside the current window.\n * @param windowSize Current window size\n * @param panelHeight The height of the settings pane\n * @param panelWidth The width of the settings pane\n * @param position The current position of the settings pane\n */\nconst getPositionInsideView = (\n  { innerHeight, innerWidth }: WindowSize,\n  panelHeight: number,\n  panelWidth: number,\n  position: Position\n) => {\n  if (position.y < 0) {\n    // Above\n    position.y = 0;\n  } else if (position.y + panelHeight > innerHeight) {\n    // Bottom\n    position.y = innerHeight - panelHeight;\n  }\n\n  if (position.x < 0) {\n    // Left\n    position.x = 0;\n  } else if (position.x + panelWidth > innerWidth) {\n    // Right\n    position.x = innerWidth - panelWidth;\n  }\n\n  return position;\n};\n\nexport default function useStatistics(panelHeight: number, panelWidth: number) {\n  // Visibility\n  const [isStatsVisible, setIsStatsVisible] = useState(true);\n\n  const toggleIsStatsVisible = useCallback(() => {\n    setIsStatsVisible(!isStatsVisible);\n  }, [isStatsVisible]);\n\n  // Location\n  const windowSize = useWindowSize();\n\n  /**\n   * Gets the stored position, and returns a valid position (within the window).\n   * @param oldPosition Previous position. When this is provided, localStorage\n   * lookup will not be done.\n   */\n  const getPosition = useCallback(\n    (oldPosition?: Partial<Position>): Position => {\n      const x = oldPosition?.x ?? getKey(X_KEY);\n      const y = oldPosition?.y ?? getKey(Y_KEY);\n\n      if (y === null || x === null) {\n        const position = getMiddle(windowSize, panelHeight, panelWidth);\n        return position;\n      }\n\n      return getPositionInsideView(windowSize, panelHeight, panelWidth, {\n        y,\n        x,\n      });\n    },\n    [windowSize, panelHeight, panelWidth]\n  );\n\n  const [position, setPosition] = useState<Position>(getPosition());\n\n  /**\n   * Updates the position based on movement or window resizing. The new position\n   * is stored inside both localStorage and React state.\n   * @param x The new x position of the window. Not provided after window\n   * resizing.\n   * @param y The new y position of the window. Not provided after window\n   * resizing.\n   */\n  const updatePosition = useCallback(\n    (x?: number, y?: number) => {\n      const newPosition = getPosition({ x, y });\n      setPosition(newPosition);\n      localStorage.setItem(X_KEY, newPosition.x.toString());\n      localStorage.setItem(Y_KEY, newPosition.y.toString());\n    },\n    [getPosition]\n  );\n\n  return {\n    isStatsVisible,\n    toggleIsStatsVisible,\n    position,\n    updatePosition,\n  };\n}\n\nexport const StatisticsVisible = React.createContext(false);\nexport const ToggleStatisticsVisible = React.createContext(() => {});\n\nexport const StatisticsPosition = React.createContext(\n  getMiddle(\n    {\n      innerHeight: window.innerHeight,\n      innerWidth: window.innerWidth,\n      outerHeight: window.outerHeight,\n      outerWidth: window.outerWidth,\n    },\n    STATS_PANEL_HEIGHT,\n    STATS_PANEL_WIDTH\n  )\n);\nexport const UpdateStatisticsPosition = React.createContext(\n  (x?: number, y?: number) => {}\n);\n","import moment from \"moment\";\n\n/**\n * Gets the time as a string from the number of seconds.\n * @param value Number of seconds\n */\nexport function getTime(value: number) {\n  return new Date(value * 1000).toISOString().substr(11, 8);\n}\n\n/**\n * Gets the time as a string of the datetime from the number of milliseconds\n * from the UNIX epoch.\n * @param dateTime The number of milliseconds from the UNIX epoch.\n */\nexport function getEpochTimeString(dateTime: number): string {\n  const d = new Date(0);\n  d.setUTCMilliseconds(dateTime);\n  return moment(d).format(\"HH:MM:SS\");\n}\n","import {\n  Card,\n  CardContent,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  makeStyles,\n} from \"@material-ui/core\";\nimport Draggable, { DraggableEvent } from \"react-draggable\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  StatisticsPosition,\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n  UpdateStatisticsPosition,\n} from \"../Video/useStatistics\";\nimport { getEpochTimeString, getTime } from \"../../utils\";\n\nimport { Close } from \"@material-ui/icons\";\nimport useWindowSize from \"@rehooks/window-size\";\n\nexport interface IStatisticsPanel {\n  time: string;\n  duration: string;\n  playbackRate: string;\n  now: number;\n  remainingTime: string;\n  remainingAtRate: string;\n  watchStartTime: number;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: \"absolute\",\n    width: 400,\n    top: 0,\n    left: 0,\n  },\n  closeButton: {\n    float: \"right\",\n  },\n});\n\nexport default function StatisticsPanel({\n  time,\n  duration,\n  playbackRate,\n  now,\n  remainingTime,\n  remainingAtRate,\n  watchStartTime,\n}: IStatisticsPanel): JSX.Element {\n  const styles = useStyles();\n  const nodeRef = useRef<HTMLSpanElement | null>(null);\n\n  const isVisible = useContext(StatisticsVisible);\n  const toggleIsVisible = useContext(ToggleStatisticsVisible);\n  const position = useContext(StatisticsPosition);\n  const updatePosition = useContext(UpdateStatisticsPosition);\n\n  const windowSize = useWindowSize();\n  const [zIndex, setZIndex] = useState(-1);\n\n  useEffect(() => {\n    if (isVisible) {\n      setZIndex(100);\n    } else {\n      setZIndex(-1);\n    }\n  }, [isVisible, position, zIndex]);\n\n  // Check if the panel needs to move when the window size changes\n  useEffect(() => {\n    updatePosition();\n  }, [updatePosition, windowSize]);\n\n  const watchingFor = useMemo(() => {\n    let time = 0;\n    if (watchStartTime !== 0) {\n      time = (now - watchStartTime) / 1000;\n    }\n    return getTime(time);\n  }, [now, watchStartTime]);\n\n  const onStop = useCallback(\n    (e: DraggableEvent) => {\n      if (nodeRef.current) {\n        const { top, left } = nodeRef.current.getBoundingClientRect();\n        updatePosition(left, top);\n      }\n    },\n    [updatePosition]\n  );\n\n  return (\n    <Draggable\n      nodeRef={nodeRef}\n      bounds=\"body\"\n      onStop={onStop}\n      position={position}\n    >\n      <span\n        ref={nodeRef}\n        className={styles.root}\n        style={{\n          zIndex,\n        }}\n      >\n        <Card style={{ opacity: 0.8 }}>\n          <CardContent>\n            <IconButton\n              aria-label=\"Close statistics panel\"\n              className={styles.closeButton}\n              onClick={toggleIsVisible}\n            >\n              <Close />\n            </IconButton>\n            <Table size=\"small\">\n              <TableBody>\n                <TableRow>\n                  <TableCell>Current time</TableCell>\n                  <TableCell>{time}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Duration</TableCell>\n                  <TableCell>{duration}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Playback rate</TableCell>\n                  <TableCell>{playbackRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining time</TableCell>\n                  <TableCell>{remainingTime}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining at ×{playbackRate}</TableCell>\n                  <TableCell>{remainingAtRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watch start time</TableCell>\n                  <TableCell>\n                    {watchStartTime === 0\n                      ? \"N/A\"\n                      : getEpochTimeString(watchStartTime)}\n                  </TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watching for</TableCell>\n                  <TableCell>{watchingFor}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </span>\n    </Draggable>\n  );\n}\n","export const STATS_PANEL_HEIGHT = 319;\nexport const STATS_PANEL_WIDTH = 400;\n","import React, { useMemo } from \"react\";\nimport { VolumeMute, VolumeUp } from \"@material-ui/icons\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isMuted: boolean;\n  toggleMuted: () => void;\n}\n\nexport default function MuteButton({\n  isMuted,\n  toggleMuted,\n}: IPlayButton): JSX.Element {\n  const audibleIcon = useMemo(() => {\n    return isMuted ? <VolumeMute /> : <VolumeUp />;\n  }, [isMuted]);\n\n  return (\n    <IconButton aria-label=\"Toggle muted\" onClick={toggleMuted}>\n      {audibleIcon}\n    </IconButton>\n  );\n}\n","import { Pause, PlayArrow } from \"@material-ui/icons\";\nimport React, { useMemo } from \"react\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isPaused: boolean;\n  togglePaused: () => void;\n}\n\nexport default function PlayButton({\n  isPaused,\n  togglePaused,\n}: IPlayButton): JSX.Element {\n  const playPauseIcon = useMemo(() => {\n    return isPaused ? <PlayArrow /> : <Pause />;\n  }, [isPaused]);\n\n  return (\n    <IconButton aria-label=\"Toggle paused\" onClick={togglePaused}>\n      {playPauseIcon}\n    </IconButton>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { TextField, makeStyles } from \"@material-ui/core\";\n\nimport { PLAYBACKRATE_STEP } from \"./utils\";\n\nexport interface IPlaybackRate {\n  value: string;\n  updateValue: (value: string) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 16,\n  },\n});\n\nexport default function PlaybackRate({\n  value,\n  updateValue,\n}: IPlaybackRate): JSX.Element {\n  const styles = useStyles();\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n      updateValue(e.currentTarget.value);\n    },\n    [updateValue]\n  );\n\n  const onBlur = useCallback(() => {\n    const rate = parseFloat(value);\n    if (isNaN(rate)) {\n      updateValue(\"1.0\");\n    }\n  }, [updateValue, value]);\n\n  return (\n    <TextField\n      className={styles.root}\n      aria-label=\"Video playback rate\"\n      type=\"number\"\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      inputProps={{\n        step: PLAYBACKRATE_STEP,\n        \"aria-label\": \"Video playback rate\",\n      }}\n    />\n  );\n}\n","export const PLAYBACKRATE_SCALE = 10;\nexport const PLAYBACKRATE_STEP = 0.1 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MIN = 0.4 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MAX = 3 * PLAYBACKRATE_SCALE;\n\nexport function roundPlaybackRate(value: number) {\n  let valueStr = value.toString();\n  return valueStr;\n}\n","import React from \"react\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\n\nexport interface IValueLabelComponentProps {\n  children: React.ReactElement;\n  open: boolean;\n  value: number;\n}\n\nexport default function ValueLabelComponent({\n  children,\n  open,\n  value,\n}: IValueLabelComponentProps): JSX.Element {\n  const time = getTime(value);\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={time}>\n      {children}\n    </Tooltip>\n  );\n}\n","import React, { useCallback } from \"react\";\n\nimport { Slider } from \"@material-ui/core\";\nimport ValueLabelComponent from \"./ValueLabelComponent\";\n\nexport interface ISeeker {\n  className?: string;\n  currentTime: number;\n  duration: number;\n  updateCurrentTime: (value: number) => void;\n}\n\nfunction getValue(value: number | number[]) {\n  if (Array.isArray(value)) {\n    return value[0] || 0;\n  }\n  return value;\n}\n\nexport default function Seeker({\n  className,\n  currentTime,\n  duration,\n  updateCurrentTime,\n}: ISeeker): JSX.Element {\n  const onRangeChange = useCallback(\n    (e: any, value: number | number[]) => {\n      updateCurrentTime(getValue(value));\n    },\n    [updateCurrentTime]\n  );\n\n  return (\n    <Slider\n      className={className}\n      value={currentTime}\n      defaultValue={0}\n      max={duration}\n      onChange={onRangeChange}\n      disabled={duration === 0}\n      ValueLabelComponent={ValueLabelComponent}\n    />\n  );\n}\n","import { Typography, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface ILabel {\n  children: string | string[];\n}\n\nexport default function Label({ children }: ILabel): JSX.Element {\n  const theme = useTheme();\n\n  return (\n    <Typography style={{ color: theme.palette.text.primary, padding: 8 }}>\n      {children}\n    </Typography>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { CancelPresentation, PresentToAll } from \"@material-ui/icons\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IStatisticsButton {\n  isVisible: boolean;\n  toggleIsVisible: () => void;\n}\n\nexport default function StatisticsButton({\n  isVisible,\n  toggleIsVisible,\n}: IStatisticsButton): JSX.Element {\n  const icon = useMemo(() => {\n    return isVisible ? <CancelPresentation /> : <PresentToAll />;\n  }, [isVisible]);\n\n  return (\n    <IconButton aria-label=\"Toggle statistics\" onClick={toggleIsVisible}>\n      {icon}\n    </IconButton>\n  );\n}\n","import MuteButton from \"../MuteButton\";\nimport PlayButton from \"../Play\";\nimport PlaybackRate from \"../PlaybackRate\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Seeker from \"../Seeker\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\nimport Label from \"../Label\";\nimport StatisticsPanel from \"../StatisticsPanel\";\nimport StatisticsButton from \"../StatisticsButton\";\nimport {\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n} from \"../Video/useStatistics\";\n\nexport interface IVideoControls {\n  duration: number;\n  currentTime: number;\n  isPaused: boolean;\n  togglePaused: () => void;\n  isMuted: boolean;\n  toggleMuted: () => void;\n  updateCurrentTime: (value: number) => void;\n  playbackRate: string;\n  updatePlaybackRate: (value: string) => void;\n  watchStartTime: number;\n}\n\nconst height = 90;\nconst padding = 16;\nexport const VIDEO_CONTROLS_HEIGHT = `${padding * 2 + height}px`;\n\nconst useStyles = makeStyles({\n  root: {\n    height,\n    display: \"flex\",\n    alignContent: \"center\",\n    flexDirection: \"column\",\n    padding,\n  },\n  seeker: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRootLeft: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n\nexport default function VideoControls({\n  duration,\n  currentTime,\n  isPaused,\n  togglePaused,\n  isMuted,\n  toggleMuted,\n  updateCurrentTime,\n  playbackRate,\n  updatePlaybackRate,\n  watchStartTime,\n}: IVideoControls): JSX.Element {\n  const styles = useStyles();\n\n  const isStatsVisible = useContext(StatisticsVisible);\n  const toggleIsStatsVisible = useContext(ToggleStatisticsVisible);\n\n  const [time, setTime] = useState(\"00:00:00\");\n  const [now, setNow] = useState(0);\n  const [remainingTime, setRemainingTime] = useState(\"00:00:00\");\n  const [remainingAtRate, setRemainingAtRate] = useState(\"00:00:00\");\n\n  useEffect(() => {\n    setTime(getTime(currentTime));\n\n    const remaining = duration - currentTime;\n    setRemainingTime(getTime(remaining));\n\n    const rate = parseFloat(playbackRate) || 1;\n    setRemainingAtRate(getTime(remaining / rate));\n  }, [currentTime, duration, playbackRate, watchStartTime]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [watchStartTime]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.seeker}>\n        <Label>{time}</Label>\n        <Seeker\n          currentTime={currentTime}\n          duration={duration}\n          updateCurrentTime={updateCurrentTime}\n        />\n        <Label>\n          -{remainingTime}/{getTime(duration)}\n        </Label>\n      </div>\n\n      <div className={styles.interactiveRoot}>\n        <div className={styles.interactiveRootLeft}>\n          <PlayButton isPaused={isPaused} togglePaused={togglePaused} />\n          <MuteButton isMuted={isMuted} toggleMuted={toggleMuted} />\n          <StatisticsButton\n            isVisible={isStatsVisible}\n            toggleIsVisible={toggleIsStatsVisible}\n          />\n        </div>\n        <PlaybackRate value={playbackRate} updateValue={updatePlaybackRate} />\n      </div>\n      <StatisticsPanel\n        time={time}\n        duration={getTime(duration)}\n        playbackRate={playbackRate}\n        now={now}\n        remainingTime={remainingTime}\n        remainingAtRate={remainingAtRate}\n        watchStartTime={watchStartTime}\n      />\n    </div>\n  );\n}\n","import { Typography, makeStyles, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface IVideoTitle {\n  children?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: \"16px\",\n  },\n});\n\n// NOTE: this is hard coded according to Typography\nexport const VIDEO_TITLE_HEIGHT = \"64px\";\n\nexport default function VideoTitle({ children }: IVideoTitle): JSX.Element {\n  const theme = useTheme();\n  const styles = useStyles();\n\n  return (\n    <Typography\n      variant=\"h6\"\n      style={{ color: theme.palette.text.primary }}\n      className={styles.root}\n    >\n      {children || \"Open a video file (Ctrl + O)\"}\n    </Typography>\n  );\n}\n","export interface KeyboardShortcut {\n  key: string;\n  ctrlKey?: boolean;\n  onKeyDown: () => void;\n}\n\nfunction keyboardMatch(e: KeyboardEvent, shortcut: KeyboardShortcut): boolean {\n  return (\n    e.key === shortcut.key &&\n    (!shortcut.ctrlKey || e.ctrlKey === shortcut.ctrlKey)\n  );\n}\n\nexport function handleKeyboardShortcuts(\n  e: KeyboardEvent,\n  shortcuts: KeyboardShortcut[]\n) {\n  for (const shortcut of shortcuts) {\n    if (keyboardMatch(e, shortcut)) {\n      shortcut.onKeyDown();\n      e.preventDefault();\n      return;\n    }\n  }\n}\n\nexport interface WheelShortcuts {\n  x: (val: number) => void;\n  y: (val: number) => void;\n}\n\nexport function handleWheelShortcuts(e: WheelEvent, shortcuts: WheelShortcuts) {\n  if (e.deltaX) {\n    shortcuts.x(e.deltaX);\n  }\n\n  if (e.deltaY) {\n    shortcuts.y(e.deltaY);\n  }\n}\n","import {\n  KeyboardShortcut,\n  handleKeyboardShortcuts,\n} from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseKeyboardShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n  selectSrc: () => void;\n  toggleMuted: () => void;\n  togglePaused: () => void;\n  toggleIsStatsVisible: () => void;\n}\n\nexport default function useKeyboardShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n  selectSrc,\n  toggleMuted,\n  togglePaused,\n  toggleIsStatsVisible: toggleStatistics,\n}: IUseKeyboardShortcuts) {\n  const leftArrow = () => addToCurrentTime(-TRAVEL_DISTANCE);\n\n  const rightArrow = () => addToCurrentTime(TRAVEL_DISTANCE);\n\n  const upArrow = () => addToPlaybackRate(PLAYBACKRATE_STEP);\n\n  const downArrow = () => addToPlaybackRate(-PLAYBACKRATE_STEP);\n\n  const keyboardShortcuts: KeyboardShortcut[] = [\n    { key: \"m\", onKeyDown: toggleMuted },\n    { key: \" \", onKeyDown: togglePaused },\n    { key: \"o\", ctrlKey: true, onKeyDown: selectSrc },\n    { key: \"s\", onKeyDown: toggleStatistics },\n    { key: \"ArrowLeft\", onKeyDown: leftArrow },\n    { key: \"ArrowRight\", onKeyDown: rightArrow },\n    { key: \"ArrowUp\", onKeyDown: upArrow },\n    { key: \"ArrowDown\", onKeyDown: downArrow },\n  ];\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      handleKeyboardShortcuts(e, keyboardShortcuts);\n    },\n    [keyboardShortcuts]\n  );\n\n  return onKeyDown;\n}\n","export type Video = HTMLVideoElement | null;\nexport const TRAVEL_DISTANCE = 10;\n","import React, { SyntheticEvent, useCallback, useRef, useState } from \"react\";\nimport { STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH } from \"../StatisticsPanel\";\nimport useStatistics, {\n  StatisticsPosition,\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n  UpdateStatisticsPosition,\n} from \"./useStatistics\";\n\nimport { VIDEO_CONTROLS_HEIGHT } from \"../VideoControls/VideoControls\";\nimport { VIDEO_TITLE_HEIGHT } from \"../VideoTitle/VideoTitle\";\nimport VideoControls from \"../VideoControls\";\nimport VideoTitle from \"../VideoTitle\";\nimport { makeStyles } from \"@material-ui/core\";\nimport useCurrentTime from \"./useCurrentTime\";\nimport useEventListener from \"react-use-event-listener\";\nimport useKeyboardShortcuts from \"./useKeyboardShortcuts\";\nimport useMediaSession from \"./useMediaSession\";\nimport useMute from \"./useMute\";\nimport usePause from \"./usePause\";\nimport usePlaybackRate from \"./usePlaybackRate\";\nimport useWheelShortcuts from \"./useWheelShortcuts\";\n\nexport interface IVideo {\n  src?: string;\n  selectSrc: () => void;\n  title?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    // width: \"100vw\",\n    height: \"100vh\",\n  },\n  video: {\n    height:\n      `calc(100vh - ${VIDEO_TITLE_HEIGHT} ` +\n      `- ${VIDEO_CONTROLS_HEIGHT} - 10px)`,\n    width: \"100vw\",\n  },\n});\n\nexport default function Video({ src, selectSrc, title }: IVideo): JSX.Element {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const styles = useStyles();\n\n  const [watchStartTime, setWatchStartTime] = useState(0);\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const [duration, setDuration] = useState(0);\n\n  const { isPaused, setIsPaused, togglePaused, onPause, onPlay } = usePause(\n    videoRef.current,\n    isVideoLoaded\n  );\n\n  const { isMuted, toggleMuted } = useMute(videoRef.current);\n\n  const {\n    currentTime,\n    onTimeUpdate,\n    updateCurrentTime,\n    addToCurrentTime,\n  } = useCurrentTime(videoRef.current, duration);\n\n  const {\n    playbackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  } = usePlaybackRate(videoRef.current);\n\n  const {\n    isStatsVisible,\n    toggleIsStatsVisible,\n    position: statsPosition,\n    updatePosition: updateStatsPosition,\n  } = useStatistics(STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH);\n\n  // Keyboard shortcuts\n  const onKeyDown = useKeyboardShortcuts({\n    addToCurrentTime,\n    addToPlaybackRate,\n    selectSrc,\n    toggleMuted,\n    togglePaused,\n    toggleIsStatsVisible,\n  });\n  useEventListener(\"keydown\", onKeyDown, document);\n\n  // Wheel shortcuts\n  const onWheel = useWheelShortcuts({ addToCurrentTime, addToPlaybackRate });\n  useEventListener(\"wheel\", onWheel, document, { passive: true });\n\n  // On loaded\n  const onLoadedMetadata = useCallback(() => {\n    const video = videoRef.current;\n    setIsVideoLoaded(true);\n    setDuration(video?.duration || 0);\n    setWatchStartTime(Date.now());\n\n    // Play\n    setIsPaused(false);\n    video?.play();\n\n    // Playback rate\n    const rate = parseFloat(playbackRate);\n    if (!isNaN(rate) && video) {\n      video.playbackRate = rate;\n    }\n  }, [playbackRate, setIsPaused]);\n\n  /**\n   * Used when an event should be ignored.\n   */\n  const eventSink = useCallback((e: SyntheticEvent) => {\n    e.preventDefault();\n  }, []);\n\n  // Title\n  useMediaSession({ title });\n\n  return (\n    <div className={styles.root}>\n      <VideoTitle>{title}</VideoTitle>\n      <video\n        className={styles.video}\n        ref={videoRef}\n        src={src}\n        muted={isMuted}\n        onLoadedMetadata={onLoadedMetadata}\n        onTimeUpdate={onTimeUpdate}\n        onPause={onPause}\n        onPlay={onPlay}\n        onContextMenu={eventSink}\n      />\n      <StatisticsVisible.Provider value={isStatsVisible}>\n        <ToggleStatisticsVisible.Provider value={toggleIsStatsVisible}>\n          <StatisticsPosition.Provider value={statsPosition}>\n            <UpdateStatisticsPosition.Provider value={updateStatsPosition}>\n              <VideoControls\n                isPaused={isPaused}\n                togglePaused={togglePaused}\n                isMuted={isMuted}\n                toggleMuted={toggleMuted}\n                duration={duration}\n                currentTime={currentTime}\n                updateCurrentTime={updateCurrentTime}\n                playbackRate={playbackRate}\n                updatePlaybackRate={updatePlaybackRate}\n                watchStartTime={watchStartTime}\n              />\n            </UpdateStatisticsPosition.Provider>\n          </StatisticsPosition.Provider>\n        </ToggleStatisticsVisible.Provider>\n      </StatisticsVisible.Provider>\n    </div>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function usePause(video: Video, videoLoaded: boolean) {\n  const [isPaused, setIsPaused] = useState(true);\n\n  const togglePaused = useCallback(() => {\n    if (video && videoLoaded) {\n      if (isPaused) {\n        video.play();\n      } else {\n        video.pause();\n      }\n      setIsPaused(!isPaused);\n    }\n  }, [isPaused, video, videoLoaded]);\n\n  const onPause = useCallback(() => {\n    setIsPaused(true);\n  }, []);\n\n  const onPlay = useCallback(() => {\n    setIsPaused(false);\n  }, []);\n\n  return { isPaused, setIsPaused, togglePaused, onPause, onPlay };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function useMute(video: Video) {\n  const [isMuted, setIsMuted] = useState(false);\n\n  const toggleMuted = useCallback(() => {\n    setIsMuted(!isMuted);\n  }, [isMuted]);\n\n  return { isMuted, setIsMuted, toggleMuted };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function useCurrentTime(video: Video, duration: number) {\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const updateCurrentTime = useCallback(\n    (value: number, isEvent = false) => {\n      if (video && !isEvent) {\n        video.currentTime = value;\n      }\n      setCurrentTime(value);\n    },\n    [video]\n  );\n\n  const addToCurrentTime = useCallback(\n    (delta: number) => {\n      if (video) {\n        let value = video.currentTime + delta;\n\n        if (value < 0) {\n          value = 0;\n        } else if (value > duration) {\n          value = duration;\n        }\n\n        updateCurrentTime(value);\n      }\n    },\n    [duration, updateCurrentTime, video]\n  );\n\n  const onTimeUpdate = useCallback(() => {\n    const time = video?.currentTime;\n    if (time) {\n      updateCurrentTime(time, true);\n    }\n  }, [updateCurrentTime, video]);\n\n  return {\n    currentTime,\n    setCurrentTime,\n    updateCurrentTime,\n    addToCurrentTime,\n    onTimeUpdate,\n  };\n}\n","import { PLAYBACKRATE_MAX, PLAYBACKRATE_MIN } from \"../PlaybackRate\";\nimport { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\nimport { roundPlaybackRate, PLAYBACKRATE_SCALE } from \"../PlaybackRate/utils\";\n\nconst PLAYBACK_RATE = \"PLAYBACK_RATE\";\n\nexport default function usePlaybackRate(video: Video) {\n  const [playbackRate, setPlaybackRate] = useState(\n    localStorage.getItem(PLAYBACK_RATE) || \"1.0\"\n  );\n\n  /**\n   * @param valueStr Receives the real playback rate value\n   */\n  const updatePlaybackRate = useCallback(\n    (recvValueStr: string) => {\n      let valueNumber = parseFloat(recvValueStr) * PLAYBACKRATE_SCALE;\n      let newValueStr: string;\n\n      if (isNaN(valueNumber)) {\n        newValueStr = \"\";\n      } else {\n        if (valueNumber < PLAYBACKRATE_MIN) {\n          valueNumber = PLAYBACKRATE_MIN;\n        } else if (valueNumber > PLAYBACKRATE_MAX) {\n          valueNumber = PLAYBACKRATE_MAX;\n        }\n\n        valueNumber /= PLAYBACKRATE_SCALE;\n        newValueStr = roundPlaybackRate(valueNumber);\n\n        if (video) {\n          video.playbackRate = valueNumber;\n        }\n      }\n\n      setPlaybackRate(newValueStr);\n      localStorage.setItem(PLAYBACK_RATE, newValueStr);\n    },\n    [video]\n  );\n\n  const addToPlaybackRate = useCallback(\n    (delta: number) => {\n      if (video) {\n        delta = Math.ceil(delta);\n        let value =\n          Math.round(video.playbackRate * PLAYBACKRATE_SCALE + delta) /\n          PLAYBACKRATE_SCALE;\n        updatePlaybackRate(value.toString());\n      }\n    },\n    [updatePlaybackRate, video]\n  );\n\n  return {\n    playbackRate,\n    setPlaybackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  };\n}\n","import { WheelShortcuts, handleWheelShortcuts } from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseWheelShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n}\n\nexport default function useWheelShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n}: IUseWheelShortcuts) {\n  const xWheel = useCallback(\n    (val: number) => {\n      addToCurrentTime(TRAVEL_DISTANCE * (val / 1000));\n    },\n    [addToCurrentTime]\n  );\n\n  const yWheel = useCallback(\n    (val: number) => {\n      addToPlaybackRate(PLAYBACKRATE_STEP * -(val / 100));\n    },\n    [addToPlaybackRate]\n  );\n\n  const wheelShortcuts: WheelShortcuts = {\n    x: xWheel,\n    y: yWheel,\n  };\n\n  const onWheel = useCallback(\n    (e: WheelEvent) => {\n      handleWheelShortcuts(e, wheelShortcuts);\n    },\n    [wheelShortcuts]\n  );\n\n  return onWheel;\n}\n","import { useEffect } from \"react\";\n\nexport default function useMediaSession(metadata: Partial<MediaMetadata>) {\n  useEffect(() => {\n    if (\"mediaSession\" in navigator && navigator.mediaSession) {\n      navigator.mediaSession.metadata = new MediaMetadata(metadata);\n    }\n  }, [metadata]);\n}\n","import React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport {\n  ThemeProvider,\n  createMuiTheme,\n  useMediaQuery,\n} from \"@material-ui/core\";\n\nimport Video from \"./components/Video\";\n\nexport default function App(): JSX.Element {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  const [src, setSrc] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectVideo = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.currentTarget.files?.length) {\n        const file = e.currentTarget.files[0];\n        setTitle(file.name);\n        URL.revokeObjectURL(src);\n        const objectURL = URL.createObjectURL(file);\n        setSrc(objectURL);\n      }\n    },\n    [src]\n  );\n\n  const selectSrc = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ backgroundColor: theme.palette.background.default }}>\n        <input\n          aria-label=\"Press Ctrl+O to open a video from the local filesystem\"\n          ref={inputRef}\n          type=\"file\"\n          accept=\"video/*\"\n          onChange={onSelectVideo}\n          style={{ display: \"none\" }}\n        />\n        <Video src={src} selectSrc={selectSrc} title={title} />\n      </div>\n    </ThemeProvider>\n  );\n}\n"],"sourceRoot":""}