{"version":3,"sources":["useWindowSize.ts","components/Video/useStatistics.ts","utils.ts","components/StatisticsPanel/StatisticsPanel.tsx","components/StatisticsPanel/constants.ts","components/Label/Label.tsx","components/MuteButton/MuteButton.tsx","components/Play/PlayButton.tsx","components/PlaybackRate/PlaybackRate.tsx","components/PlaybackRate/utils.ts","components/Seeker/ValueLabelComponent.tsx","components/Seeker/Seeker.tsx","components/StatisticsButton/StatisticsButton.tsx","components/VideoControls/VideoControls.tsx","components/VideoTitle/VideoTitle.tsx","components/Video/handleVideoShortcuts.ts","components/Video/useKeyboardShortcuts.ts","components/Video/utils.ts","components/Video/Video.tsx","components/Video/usePause.ts","components/Video/useMute.ts","components/Video/useCurrentTime.ts","components/Video/usePlaybackRate.ts","components/Video/useWheelShortcuts.ts","components/Video/useMediaSession.ts","App.tsx"],"names":["getSize","innerHeight","window","innerWidth","outerHeight","outerWidth","useWindowSize","useState","windowSize","setWindowSize","handleResize","useEffect","addEventListener","removeEventListener","Y_KEY","X_KEY","getMiddle","panelHeight","panelWidth","halfPanelHeight","Math","floor","halfPanelWidth","halfWindowHeight","x","y","getKey","key","value","localStorage","getItem","float","parseFloat","isNaN","StatisticsVisible","React","createContext","ToggleStatisticsVisible","console","log","StatisticsPosition","STATS_PANEL_HEIGHT","STATS_PANEL_WIDTH","UpdateStatisticsPosition","_x","_y","getTime","Date","toISOString","substr","useStyles","makeStyles","closeButton","root","left","position","top","width","StatisticsPanel","time","duration","playbackRate","now","remainingTime","remainingAtRate","watchStartTime","styles","nodeRef","useRef","isVisible","useContext","toggleIsVisible","updatePosition","zIndex","setZIndex","watchingFor","useMemo","onStop","useCallback","current","getBoundingClientRect","bounds","ref","className","style","Card","opacity","CardContent","IconButton","aria-label","onClick","Close","Table","size","TableBody","TableRow","TableCell","dateTime","d","format","getEpochTimeString","Label","children","theme","useTheme","Typography","color","palette","text","primary","padding","MuteButton","isMuted","toggleMuted","audibleIcon","VolumeMute","VolumeUp","PlayButton","isPaused","togglePaused","playPauseIcon","PlayArrow","Pause","PlaybackRate","updateValue","onChange","e","currentTarget","onBlur","rate","TextField","type","inputProps","step","ValueLabelComponent","open","Tooltip","enterTouchDelay","placement","title","Seeker","currentTime","updateCurrentTime","onRangeChange","Array","isArray","getValue","Slider","defaultValue","max","disabled","StatisticsButton","icon","CancelPresentation","PresentToAll","VIDEO_CONTROLS_HEIGHT","interactiveRoot","display","justifyContent","interactiveRootLeft","alignItems","flexDirection","alignContent","height","seeker","VideoControls","updatePlaybackRate","isStatsVisible","toggleIsStatsVisible","setTime","setNow","setRemainingTime","setRemainingAtRate","remaining","interval","setInterval","clearInterval","VideoTitle","variant","keyboardMatch","shortcut","ctrlKey","useKeyboardShortcuts","addToCurrentTime","addToPlaybackRate","selectSrc","toggleStatistics","shortcuts","onKeyDown","preventDefault","handleKeyboardShortcuts","video","Video","src","videoRef","setWatchStartTime","isVideoLoaded","setIsVideoLoaded","setDuration","videoLoaded","setIsPaused","play","pause","onPause","onPlay","usePause","setIsMuted","useMute","setCurrentTime","isEvent","delta","onTimeUpdate","useCurrentTime","setPlaybackRate","recvValueStr","newValueStr","valueNumber","toString","setItem","ceil","round","usePlaybackRate","setIsStatsVisible","getPosition","oldPosition","getPositionInsideView","setPosition","newPosition","useStatistics","statsPosition","updateStatsPosition","useEventListener","document","onWheel","xWheel","val","yWheel","deltaX","deltaY","handleWheelShortcuts","useWheelShortcuts","passive","metadata","onLoadedMetadata","eventSink","navigator","mediaSession","MediaMetadata","muted","onContextMenu","Provider","App","prefersDarkMode","useMediaQuery","createMuiTheme","setSrc","setTitle","inputRef","onSelectVideo","files","length","file","name","URL","revokeObjectURL","objectURL","createObjectURL","click","ThemeProvider","backgroundColor","background","default","accept"],"mappings":"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","file":"static/js/4.b087c121.chunk.js","sourcesContent":["// https://github.com/rehooks/window-size\n\n// Copyright (c) 2018-present James Kyle <me@thejameskyle.com>\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nimport { useEffect, useState } from \"react\";\n\nexport interface WindowSize {\n  innerHeight: number;\n  innerWidth: number;\n  outerHeight: number;\n  outerWidth: number;\n}\n\nconst getSize = (): WindowSize => ({\n  innerHeight: window.innerHeight,\n  innerWidth: window.innerWidth,\n  outerHeight: window.outerHeight,\n  outerWidth: window.outerWidth,\n});\n\nconst useWindowSize = (): WindowSize => {\n  const [windowSize, setWindowSize] = useState(getSize());\n\n  function handleResize() {\n    setWindowSize(getSize());\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  return windowSize;\n};\n\nexport default useWindowSize;\n","import { STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH } from \"../StatisticsPanel\";\nimport { useCallback, useState } from \"react\";\nimport useWindowSize, { WindowSize } from \"../../useWindowSize\";\n\nimport React from \"react\";\n\nconst Y_KEY = \"statistics.position.y\";\nconst X_KEY = \"statistics.position.x\";\n\nexport interface Position {\n  x: number;\n  y: number;\n}\n\nconst getMiddle = (\n  windowSize: WindowSize,\n  panelHeight: number,\n  panelWidth: number,\n): Position => {\n  const halfPanelHeight = Math.floor(panelHeight / 2);\n  const halfPanelWidth = Math.floor(panelWidth / 2);\n\n  const halfWindowHeight = Math.floor(windowSize.innerHeight / 2);\n  const halfWindowWidth = Math.floor(windowSize.innerWidth / 2);\n\n  return {\n    x: halfWindowWidth - halfPanelWidth,\n    y: halfWindowHeight - halfPanelHeight,\n  };\n};\n\nconst getKey = (key: string): number | null => {\n  const value = localStorage.getItem(key);\n  if (value === null) {\n    return null;\n  }\n\n  const float = parseFloat(value);\n  if (isNaN(float)) {\n    return null;\n  }\n\n  return float;\n};\n\n/**\n * Makes sure that the position is inside the current window.\n * @param windowSize Current window size\n * @param panelHeight The height of the settings pane\n * @param panelWidth The width of the settings pane\n * @param position The current position of the settings pane\n */\nconst getPositionInsideView = (\n  { innerHeight, innerWidth }: WindowSize,\n  panelHeight: number,\n  panelWidth: number,\n  position: Position,\n) => {\n  if (position.y < 0) {\n    // Above\n    position.y = 0;\n  } else if (position.y + panelHeight > innerHeight) {\n    // Bottom\n    position.y = innerHeight - panelHeight;\n  }\n\n  if (position.x < 0) {\n    // Left\n    position.x = 0;\n  } else if (position.x + panelWidth > innerWidth) {\n    // Right\n    position.x = innerWidth - panelWidth;\n  }\n\n  return position;\n};\n\nexport interface IUseStatistics {\n  isStatsVisible: boolean;\n  position: Position;\n  toggleIsStatsVisible: () => void;\n  updatePosition: (x?: number | undefined, y?: number | undefined) => void;\n}\n\nexport default function useStatistics(\n  panelHeight: number,\n  panelWidth: number,\n): IUseStatistics {\n  // Visibility\n  const [isStatsVisible, setIsStatsVisible] = useState(true);\n\n  const toggleIsStatsVisible = useCallback(() => {\n    setIsStatsVisible(!isStatsVisible);\n  }, [isStatsVisible]);\n\n  // Location\n  const windowSize = useWindowSize();\n\n  /**\n   * Gets the stored position, and returns a valid position (within the window).\n   * @param oldPosition Previous position. When this is provided, localStorage\n   * lookup will not be done.\n   */\n  const getPosition = useCallback(\n    (oldPosition?: Partial<Position>): Position => {\n      const x = oldPosition?.x ?? getKey(X_KEY);\n      const y = oldPosition?.y ?? getKey(Y_KEY);\n\n      if (y === null || x === null) {\n        const position = getMiddle(windowSize, panelHeight, panelWidth);\n        return position;\n      }\n\n      return getPositionInsideView(windowSize, panelHeight, panelWidth, {\n        x,\n        y,\n      });\n    },\n    [windowSize, panelHeight, panelWidth],\n  );\n\n  const [position, setPosition] = useState<Position>(getPosition());\n\n  /**\n   * Updates the position based on movement or window resizing. The new position\n   * is stored inside both localStorage and React state.\n   * @param x The new x position of the window. Not provided after window\n   * resizing.\n   * @param y The new y position of the window. Not provided after window\n   * resizing.\n   */\n  const updatePosition = useCallback(\n    (x?: number, y?: number) => {\n      const newPosition = getPosition({ x, y });\n      setPosition(newPosition);\n      localStorage.setItem(X_KEY, newPosition.x.toString());\n      localStorage.setItem(Y_KEY, newPosition.y.toString());\n    },\n    [getPosition],\n  );\n\n  return {\n    isStatsVisible,\n    position,\n    toggleIsStatsVisible,\n    updatePosition,\n  };\n}\n\nexport const StatisticsVisible = React.createContext(false);\nexport const ToggleStatisticsVisible = React.createContext(() => {\n  console.log(\"ToggleStatisticsVisible's context has not yet been set.\");\n});\n\nexport const StatisticsPosition = React.createContext(\n  getMiddle(\n    {\n      innerHeight: window.innerHeight,\n      innerWidth: window.innerWidth,\n      outerHeight: window.outerHeight,\n      outerWidth: window.outerWidth,\n    },\n    STATS_PANEL_HEIGHT,\n    STATS_PANEL_WIDTH,\n  ),\n);\nexport const UpdateStatisticsPosition = React.createContext(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  (_x?: number, _y?: number): void => {\n    console.log(\"UpdateStatisticsPosition's context has not yet been set.\");\n  },\n);\n","import format from \"date-fns/format\";\n/**\n * Gets the time as a string from the number of seconds.\n * @param value Number of seconds\n */\nexport function getTime(value: number): string {\n  return new Date(value * 1000).toISOString().substr(11, 8);\n}\n\n/**\n * Gets the time as a string of the datetime from the number of milliseconds\n * from the UNIX epoch.\n * @param dateTime The number of milliseconds from the UNIX epoch.\n */\nexport function getEpochTimeString(dateTime: number): string {\n  const d = new Date(dateTime);\n  return format(d, \"HH:mm:ss\");\n}\n","import {\n  Card,\n  CardContent,\n  IconButton,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n  makeStyles,\n} from \"@material-ui/core\";\nimport React, {\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  StatisticsPosition,\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n  UpdateStatisticsPosition,\n} from \"../Video/useStatistics\";\nimport { getEpochTimeString, getTime } from \"../../utils\";\n\nimport { Close } from \"@material-ui/icons\";\nimport Draggable from \"react-draggable\";\nimport useWindowSize from \"../../useWindowSize\";\n\nexport interface IStatisticsPanel {\n  time: string;\n  duration: string;\n  playbackRate: string;\n  now: number;\n  remainingTime: string;\n  remainingAtRate: string;\n  watchStartTime: number;\n}\n\nconst useStyles = makeStyles({\n  closeButton: {\n    float: \"right\",\n  },\n  root: {\n    left: 0,\n    position: \"absolute\",\n    top: 0,\n    width: 400,\n  },\n});\n\nexport default function StatisticsPanel({\n  time,\n  duration,\n  playbackRate,\n  now,\n  remainingTime,\n  remainingAtRate,\n  watchStartTime,\n}: IStatisticsPanel): JSX.Element {\n  const styles = useStyles();\n  const nodeRef = useRef<HTMLSpanElement | null>(null);\n\n  const isVisible = useContext(StatisticsVisible);\n  const toggleIsVisible = useContext(ToggleStatisticsVisible);\n  const position = useContext(StatisticsPosition);\n  const updatePosition = useContext(UpdateStatisticsPosition);\n\n  const windowSize = useWindowSize();\n  const [zIndex, setZIndex] = useState(-1);\n\n  useEffect(() => {\n    if (isVisible) {\n      setZIndex(100);\n    } else {\n      setZIndex(-1);\n    }\n  }, [isVisible, position, zIndex]);\n\n  // Check if the panel needs to move when the window size changes\n  useEffect(() => {\n    updatePosition();\n  }, [updatePosition, windowSize]);\n\n  const watchingFor = useMemo(() => {\n    let time = 0;\n    if (watchStartTime !== 0) {\n      time = (now - watchStartTime) / 1000;\n    }\n    return getTime(time);\n  }, [now, watchStartTime]);\n\n  const onStop = useCallback(() => {\n    if (nodeRef.current) {\n      const { top, left } = nodeRef.current.getBoundingClientRect();\n      updatePosition(left, top);\n    }\n  }, [updatePosition]);\n\n  return (\n    <Draggable\n      nodeRef={nodeRef}\n      bounds=\"body\"\n      onStop={onStop}\n      position={position}\n    >\n      <span\n        ref={nodeRef}\n        className={styles.root}\n        style={{\n          zIndex,\n        }}\n      >\n        <Card style={{ opacity: 0.8 }}>\n          <CardContent>\n            <IconButton\n              aria-label=\"Close statistics panel\"\n              className={styles.closeButton}\n              onClick={toggleIsVisible}\n            >\n              <Close />\n            </IconButton>\n            <Table size=\"small\">\n              <TableBody>\n                <TableRow>\n                  <TableCell>Current time</TableCell>\n                  <TableCell>{time}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watching for</TableCell>\n                  <TableCell>{watchingFor}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Duration</TableCell>\n                  <TableCell>{duration}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Playback rate</TableCell>\n                  <TableCell>{playbackRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining time</TableCell>\n                  <TableCell>{remainingTime}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining at ×{playbackRate}</TableCell>\n                  <TableCell>{remainingAtRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watch start time</TableCell>\n                  <TableCell>\n                    {watchStartTime === 0\n                      ? \"N/A\"\n                      : getEpochTimeString(watchStartTime)}\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </span>\n    </Draggable>\n  );\n}\n","export const STATS_PANEL_HEIGHT = 319;\nexport const STATS_PANEL_WIDTH = 400;\n","import { Typography, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface ILabel {\n  children: string | string[];\n}\n\nexport default function Label({ children }: ILabel): JSX.Element {\n  const theme = useTheme();\n\n  return (\n    <Typography style={{ color: theme.palette.text.primary, padding: 8 }}>\n      {children}\n    </Typography>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { VolumeMute, VolumeUp } from \"@material-ui/icons\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isMuted: boolean;\n  toggleMuted: () => void;\n}\n\nexport default function MuteButton({\n  isMuted,\n  toggleMuted,\n}: IPlayButton): JSX.Element {\n  const audibleIcon = useMemo(() => {\n    return isMuted ? <VolumeMute /> : <VolumeUp />;\n  }, [isMuted]);\n\n  return (\n    <IconButton aria-label=\"Toggle muted\" onClick={toggleMuted}>\n      {audibleIcon}\n    </IconButton>\n  );\n}\n","import { Pause, PlayArrow } from \"@material-ui/icons\";\nimport React, { useMemo } from \"react\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isPaused: boolean;\n  togglePaused: () => void;\n}\n\nexport default function PlayButton({\n  isPaused,\n  togglePaused,\n}: IPlayButton): JSX.Element {\n  const playPauseIcon = useMemo(() => {\n    return isPaused ? <PlayArrow /> : <Pause />;\n  }, [isPaused]);\n\n  return (\n    <IconButton aria-label=\"Toggle paused\" onClick={togglePaused}>\n      {playPauseIcon}\n    </IconButton>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { TextField, makeStyles } from \"@material-ui/core\";\n\nimport { PLAYBACKRATE_STEP } from \"./utils\";\n\nexport interface IPlaybackRate {\n  value: string;\n  updateValue: (value: string) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 16,\n  },\n});\n\nexport default function PlaybackRate({\n  value,\n  updateValue,\n}: IPlaybackRate): JSX.Element {\n  const styles = useStyles();\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n      updateValue(e.currentTarget.value);\n    },\n    [updateValue],\n  );\n\n  const onBlur = useCallback(() => {\n    const rate = parseFloat(value);\n    if (isNaN(rate)) {\n      updateValue(\"1.0\");\n    }\n  }, [updateValue, value]);\n\n  return (\n    <TextField\n      className={styles.root}\n      aria-label=\"Video playback rate\"\n      type=\"number\"\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      inputProps={{\n        \"aria-label\": \"Video playback rate\",\n        step: PLAYBACKRATE_STEP,\n      }}\n    />\n  );\n}\n","export const PLAYBACKRATE_SCALE = 10;\nexport const PLAYBACKRATE_STEP = 0.1 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MIN = 0.4 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MAX = 3 * PLAYBACKRATE_SCALE;\n\nexport function roundPlaybackRate(value: number): string {\n  const valueStr = value.toString();\n  return valueStr;\n}\n","import React from \"react\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\n\nexport interface IValueLabelComponentProps {\n  children: React.ReactElement;\n  open: boolean;\n  value: number;\n}\n\nexport default function ValueLabelComponent({\n  children,\n  open,\n  value,\n}: IValueLabelComponentProps): JSX.Element {\n  const time = getTime(value);\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={time}>\n      {children}\n    </Tooltip>\n  );\n}\n","import React, { useCallback } from \"react\";\n\nimport { Slider } from \"@material-ui/core\";\nimport ValueLabelComponent from \"./ValueLabelComponent\";\n\nexport interface ISeeker {\n  className?: string;\n  currentTime: number;\n  duration: number;\n  updateCurrentTime: (value: number) => void;\n}\n\nfunction getValue(value: number | number[]) {\n  if (Array.isArray(value)) {\n    return value[0] || 0;\n  }\n  return value;\n}\n\nexport default function Seeker({\n  className,\n  currentTime,\n  duration,\n  updateCurrentTime,\n}: ISeeker): JSX.Element {\n  const onRangeChange = useCallback(\n    (e: unknown, value: number | number[]) => {\n      updateCurrentTime(getValue(value));\n    },\n    [updateCurrentTime],\n  );\n\n  return (\n    <Slider\n      className={className}\n      value={currentTime}\n      defaultValue={0}\n      max={duration}\n      onChange={onRangeChange}\n      disabled={duration === 0}\n      ValueLabelComponent={ValueLabelComponent}\n    />\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { CancelPresentation, PresentToAll } from \"@material-ui/icons\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IStatisticsButton {\n  isVisible: boolean;\n  toggleIsVisible: () => void;\n}\n\nexport default function StatisticsButton({\n  isVisible,\n  toggleIsVisible,\n}: IStatisticsButton): JSX.Element {\n  const icon = useMemo(() => {\n    return isVisible ? <CancelPresentation /> : <PresentToAll />;\n  }, [isVisible]);\n\n  return (\n    <IconButton aria-label=\"Toggle statistics\" onClick={toggleIsVisible}>\n      {icon}\n    </IconButton>\n  );\n}\n","import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n} from \"../Video/useStatistics\";\n\nimport Label from \"../Label\";\nimport MuteButton from \"../MuteButton\";\nimport PlayButton from \"../Play\";\nimport PlaybackRate from \"../PlaybackRate\";\nimport Seeker from \"../Seeker\";\nimport StatisticsButton from \"../StatisticsButton\";\nimport StatisticsPanel from \"../StatisticsPanel\";\nimport { getTime } from \"../../utils\";\nimport { makeStyles } from \"@material-ui/core\";\n\nexport interface IVideoControls {\n  duration: number;\n  currentTime: number;\n  isPaused: boolean;\n  togglePaused: () => void;\n  isMuted: boolean;\n  toggleMuted: () => void;\n  updateCurrentTime: (value: number) => void;\n  playbackRate: string;\n  updatePlaybackRate: (value: string) => void;\n  watchStartTime: number;\n}\n\nconst height = 90;\nconst padding = 16;\nexport const VIDEO_CONTROLS_HEIGHT = `${padding * 2 + height}px`;\n\nconst useStyles = makeStyles({\n  interactiveRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRootLeft: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n  },\n  root: {\n    alignContent: \"center\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    height,\n    padding,\n  },\n  seeker: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n});\n\nexport default function VideoControls({\n  duration,\n  currentTime,\n  isPaused,\n  togglePaused,\n  isMuted,\n  toggleMuted,\n  updateCurrentTime,\n  playbackRate,\n  updatePlaybackRate,\n  watchStartTime,\n}: IVideoControls): JSX.Element {\n  const styles = useStyles();\n\n  const isStatsVisible = useContext(StatisticsVisible);\n  const toggleIsStatsVisible = useContext(ToggleStatisticsVisible);\n\n  const [time, setTime] = useState(\"00:00:00\");\n  const [now, setNow] = useState(0);\n  const [remainingTime, setRemainingTime] = useState(\"00:00:00\");\n  const [remainingAtRate, setRemainingAtRate] = useState(\"00:00:00\");\n\n  useEffect(() => {\n    setTime(getTime(currentTime));\n\n    const remaining = duration - currentTime;\n    setRemainingTime(getTime(remaining));\n\n    const rate = parseFloat(playbackRate) || 1;\n    setRemainingAtRate(getTime(remaining / rate));\n  }, [currentTime, duration, playbackRate, watchStartTime]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [watchStartTime]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.seeker}>\n        <Label>{time}</Label>\n        <Seeker\n          currentTime={currentTime}\n          duration={duration}\n          updateCurrentTime={updateCurrentTime}\n        />\n        <Label>\n          -{remainingTime}/{getTime(duration)}\n        </Label>\n      </div>\n\n      <div className={styles.interactiveRoot}>\n        <div className={styles.interactiveRootLeft}>\n          <PlayButton isPaused={isPaused} togglePaused={togglePaused} />\n          <MuteButton isMuted={isMuted} toggleMuted={toggleMuted} />\n          <StatisticsButton\n            isVisible={isStatsVisible}\n            toggleIsVisible={toggleIsStatsVisible}\n          />\n        </div>\n        <PlaybackRate value={playbackRate} updateValue={updatePlaybackRate} />\n      </div>\n      <StatisticsPanel\n        time={time}\n        duration={getTime(duration)}\n        playbackRate={playbackRate}\n        now={now}\n        remainingTime={remainingTime}\n        remainingAtRate={remainingAtRate}\n        watchStartTime={watchStartTime}\n      />\n    </div>\n  );\n}\n","import { Typography, makeStyles, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface IVideoTitle {\n  children?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: \"16px\",\n  },\n});\n\n// NOTE: this is hard coded according to Typography\nexport const VIDEO_TITLE_HEIGHT = \"64px\";\n\nexport default function VideoTitle({ children }: IVideoTitle): JSX.Element {\n  const theme = useTheme();\n  const styles = useStyles();\n\n  return (\n    <Typography\n      variant=\"h6\"\n      style={{ color: theme.palette.text.primary }}\n      className={styles.root}\n    >\n      {children || \"Open a video file (Ctrl + O)\"}\n    </Typography>\n  );\n}\n","export interface KeyboardShortcut {\n  key: string;\n  ctrlKey?: boolean;\n  onKeyDown: () => void;\n}\n\nfunction keyboardMatch(e: KeyboardEvent, shortcut: KeyboardShortcut): boolean {\n  return (\n    e.key === shortcut.key &&\n    (!shortcut.ctrlKey || e.ctrlKey === shortcut.ctrlKey)\n  );\n}\n\nexport function handleKeyboardShortcuts(\n  e: KeyboardEvent,\n  shortcuts: KeyboardShortcut[],\n): void {\n  for (const shortcut of shortcuts) {\n    if (keyboardMatch(e, shortcut)) {\n      shortcut.onKeyDown();\n      e.preventDefault();\n      return;\n    }\n  }\n}\n\nexport interface WheelShortcuts {\n  x: (val: number) => void;\n  y: (val: number) => void;\n}\n\nexport function handleWheelShortcuts(\n  e: WheelEvent,\n  shortcuts: WheelShortcuts,\n): void {\n  if (e.deltaX) {\n    shortcuts.x(e.deltaX);\n  }\n\n  if (e.deltaY) {\n    shortcuts.y(e.deltaY);\n  }\n}\n","import {\n  KeyboardShortcut,\n  handleKeyboardShortcuts,\n} from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseKeyboardShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n  updatePlaybackRate: (rate: string) => void;\n  selectSrc: () => void;\n  toggleMuted: () => void;\n  togglePaused: () => void;\n  toggleIsStatsVisible: () => void;\n}\n\ntype OnKeyDownEvent = (e: KeyboardEvent) => void;\n\nexport default function useKeyboardShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n  updatePlaybackRate,\n  selectSrc,\n  toggleMuted,\n  togglePaused,\n  toggleIsStatsVisible: toggleStatistics,\n}: IUseKeyboardShortcuts): OnKeyDownEvent {\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      const leftArrow = () => addToCurrentTime(-TRAVEL_DISTANCE);\n      const rightArrow = () => addToCurrentTime(TRAVEL_DISTANCE);\n      const upArrow = () => addToPlaybackRate(PLAYBACKRATE_STEP);\n      const downArrow = () => addToPlaybackRate(-PLAYBACKRATE_STEP);\n      const gotoSpeed1 = () => updatePlaybackRate(\"1\");\n      const gotoSpeed2 = () => updatePlaybackRate(\"2\");\n      const gotoSpeed3 = () => updatePlaybackRate(\"3\");\n\n      const keyboardShortcuts: KeyboardShortcut[] = [\n        { key: \"m\", onKeyDown: toggleMuted },\n        { key: \" \", onKeyDown: togglePaused },\n        { ctrlKey: true, key: \"o\", onKeyDown: selectSrc },\n        { key: \"s\", onKeyDown: toggleStatistics },\n        { key: \"ArrowLeft\", onKeyDown: leftArrow },\n        { key: \"ArrowRight\", onKeyDown: rightArrow },\n        { key: \"ArrowUp\", onKeyDown: upArrow },\n        { key: \"ArrowDown\", onKeyDown: downArrow },\n        { key: \"1\", onKeyDown: gotoSpeed1 },\n        { key: \"2\", onKeyDown: gotoSpeed2 },\n        { key: \"3\", onKeyDown: gotoSpeed3 },\n      ];\n\n      handleKeyboardShortcuts(e, keyboardShortcuts);\n    },\n    [\n      addToCurrentTime,\n      addToPlaybackRate,\n      selectSrc,\n      toggleMuted,\n      togglePaused,\n      toggleStatistics,\n      updatePlaybackRate,\n    ],\n  );\n\n  return onKeyDown;\n}\n","export type Video = HTMLVideoElement | null;\nexport const TRAVEL_DISTANCE = 10;\n","import React, { SyntheticEvent, useCallback, useRef, useState } from \"react\";\nimport { STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH } from \"../StatisticsPanel\";\nimport useStatistics, {\n  StatisticsPosition,\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n  UpdateStatisticsPosition,\n} from \"./useStatistics\";\n\nimport { VIDEO_CONTROLS_HEIGHT } from \"../VideoControls/VideoControls\";\nimport { VIDEO_TITLE_HEIGHT } from \"../VideoTitle/VideoTitle\";\nimport VideoControls from \"../VideoControls\";\nimport VideoTitle from \"../VideoTitle\";\nimport { makeStyles } from \"@material-ui/core\";\nimport useCurrentTime from \"./useCurrentTime\";\nimport useEventListener from \"react-use-event-listener\";\nimport useKeyboardShortcuts from \"./useKeyboardShortcuts\";\nimport useMediaSession from \"./useMediaSession\";\nimport useMute from \"./useMute\";\nimport usePause from \"./usePause\";\nimport usePlaybackRate from \"./usePlaybackRate\";\nimport useWheelShortcuts from \"./useWheelShortcuts\";\n\nexport interface IVideo {\n  src?: string;\n  selectSrc: () => void;\n  title?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    // width: \"100vw\",\n    height: \"100vh\",\n  },\n  video: {\n    height:\n      `calc(100vh - ${VIDEO_TITLE_HEIGHT} ` +\n      `- ${VIDEO_CONTROLS_HEIGHT} - 10px)`,\n    width: \"100vw\",\n  },\n});\n\nexport default function Video({ src, selectSrc, title }: IVideo): JSX.Element {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const styles = useStyles();\n\n  const [watchStartTime, setWatchStartTime] = useState(0);\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const [duration, setDuration] = useState(0);\n\n  const { isPaused, setIsPaused, togglePaused, onPause, onPlay } = usePause(\n    videoRef.current,\n    isVideoLoaded,\n  );\n\n  const { isMuted, toggleMuted } = useMute();\n\n  const {\n    currentTime,\n    onTimeUpdate,\n    updateCurrentTime,\n    addToCurrentTime,\n  } = useCurrentTime(videoRef.current, duration);\n\n  const {\n    playbackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  } = usePlaybackRate(videoRef.current);\n\n  const {\n    isStatsVisible,\n    toggleIsStatsVisible,\n    position: statsPosition,\n    updatePosition: updateStatsPosition,\n  } = useStatistics(STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH);\n\n  // Keyboard shortcuts\n  const onKeyDown = useKeyboardShortcuts({\n    addToCurrentTime,\n    addToPlaybackRate,\n    selectSrc,\n    toggleIsStatsVisible,\n    toggleMuted,\n    togglePaused,\n    updatePlaybackRate,\n  });\n  useEventListener(\"keydown\", onKeyDown, document);\n\n  // Wheel shortcuts\n  const onWheel = useWheelShortcuts({ addToCurrentTime, addToPlaybackRate });\n  useEventListener(\"wheel\", onWheel, document, { passive: true });\n\n  // On loaded\n  const onLoadedMetadata = useCallback(() => {\n    const video = videoRef.current;\n    setIsVideoLoaded(true);\n    setDuration(video?.duration || 0);\n    setWatchStartTime(Date.now());\n\n    // Play\n    setIsPaused(false);\n    video?.play();\n\n    // Playback rate\n    const rate = parseFloat(playbackRate);\n    if (!isNaN(rate) && video) {\n      video.playbackRate = rate;\n    }\n  }, [playbackRate, setIsPaused]);\n\n  /**\n   * Used when an event should be ignored.\n   */\n  const eventSink = useCallback((e: SyntheticEvent) => {\n    e.preventDefault();\n  }, []);\n\n  // Title\n  useMediaSession({ title });\n\n  return (\n    <div className={styles.root}>\n      <VideoTitle>{title}</VideoTitle>\n      <video\n        className={styles.video}\n        ref={videoRef}\n        src={src}\n        muted={isMuted}\n        onLoadedMetadata={onLoadedMetadata}\n        onTimeUpdate={onTimeUpdate}\n        onPause={onPause}\n        onPlay={onPlay}\n        onContextMenu={eventSink}\n      />\n      <StatisticsVisible.Provider value={isStatsVisible}>\n        <ToggleStatisticsVisible.Provider value={toggleIsStatsVisible}>\n          <StatisticsPosition.Provider value={statsPosition}>\n            <UpdateStatisticsPosition.Provider value={updateStatsPosition}>\n              <VideoControls\n                isPaused={isPaused}\n                togglePaused={togglePaused}\n                isMuted={isMuted}\n                toggleMuted={toggleMuted}\n                duration={duration}\n                currentTime={currentTime}\n                updateCurrentTime={updateCurrentTime}\n                playbackRate={playbackRate}\n                updatePlaybackRate={updatePlaybackRate}\n                watchStartTime={watchStartTime}\n              />\n            </UpdateStatisticsPosition.Provider>\n          </StatisticsPosition.Provider>\n        </ToggleStatisticsVisible.Provider>\n      </StatisticsVisible.Provider>\n    </div>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport interface IUsePause {\n  isPaused: boolean;\n  onPause: () => void;\n  onPlay: () => void;\n  setIsPaused: React.Dispatch<React.SetStateAction<boolean>>;\n  togglePaused: () => void;\n}\n\nexport default function usePause(\n  video: Video,\n  videoLoaded: boolean,\n): IUsePause {\n  const [isPaused, setIsPaused] = useState(true);\n\n  const togglePaused = useCallback(() => {\n    if (video && videoLoaded) {\n      if (isPaused) {\n        video.play();\n      } else {\n        video.pause();\n      }\n      setIsPaused(!isPaused);\n    }\n  }, [isPaused, video, videoLoaded]);\n\n  const onPause = useCallback(() => {\n    setIsPaused(true);\n  }, []);\n\n  const onPlay = useCallback(() => {\n    setIsPaused(false);\n  }, []);\n\n  return { isPaused, onPause, onPlay, setIsPaused, togglePaused };\n}\n","import { useCallback, useState } from \"react\";\n\nexport interface IUseMute {\n  isMuted: boolean;\n  setIsMuted: React.Dispatch<React.SetStateAction<boolean>>;\n  toggleMuted: () => void;\n}\n\nexport default function useMute(): IUseMute {\n  const [isMuted, setIsMuted] = useState(false);\n\n  const toggleMuted = useCallback(() => {\n    setIsMuted(!isMuted);\n  }, [isMuted]);\n\n  return { isMuted, setIsMuted, toggleMuted };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport interface IUseCurrentTime {\n  addToCurrentTime: (delta: number) => void;\n  currentTime: number;\n  onTimeUpdate: () => void;\n  setCurrentTime: React.Dispatch<React.SetStateAction<number>>;\n  updateCurrentTime: (value: number, isEvent?: boolean) => void;\n}\n\nexport default function useCurrentTime(\n  video: Video,\n  duration: number,\n): IUseCurrentTime {\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const updateCurrentTime = useCallback(\n    (value: number, isEvent = false) => {\n      if (video && !isEvent) {\n        video.currentTime = value;\n      }\n      setCurrentTime(value);\n    },\n    [video],\n  );\n\n  const addToCurrentTime = useCallback(\n    (delta: number) => {\n      if (video) {\n        let value = video.currentTime + delta;\n\n        if (value < 0) {\n          value = 0;\n        } else if (value > duration) {\n          value = duration;\n        }\n\n        updateCurrentTime(value);\n      }\n    },\n    [duration, updateCurrentTime, video],\n  );\n\n  const onTimeUpdate = useCallback(() => {\n    const time = video?.currentTime;\n    if (time) {\n      updateCurrentTime(time, true);\n    }\n  }, [updateCurrentTime, video]);\n\n  return {\n    addToCurrentTime,\n    currentTime,\n    onTimeUpdate,\n    setCurrentTime,\n    updateCurrentTime,\n  };\n}\n","import { PLAYBACKRATE_MAX, PLAYBACKRATE_MIN } from \"../PlaybackRate\";\nimport { PLAYBACKRATE_SCALE, roundPlaybackRate } from \"../PlaybackRate/utils\";\nimport { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nconst PLAYBACK_RATE = \"PLAYBACK_RATE\";\n\nexport interface IUsePlaybackRate {\n  addToPlaybackRate: (delta: number) => void;\n  playbackRate: string;\n  setPlaybackRate: React.Dispatch<React.SetStateAction<string>>;\n  updatePlaybackRate: (recvValueStr: string) => void;\n}\n\nexport default function usePlaybackRate(video: Video): IUsePlaybackRate {\n  const [playbackRate, setPlaybackRate] = useState(\n    localStorage.getItem(PLAYBACK_RATE) || \"1.0\",\n  );\n\n  /**\n   * @param valueStr Receives the real playback rate value\n   */\n  const updatePlaybackRate = useCallback(\n    (recvValueStr: string) => {\n      let valueNumber = parseFloat(recvValueStr) * PLAYBACKRATE_SCALE;\n      let newValueStr: string;\n\n      if (isNaN(valueNumber)) {\n        newValueStr = \"\";\n      } else {\n        if (valueNumber < PLAYBACKRATE_MIN) {\n          valueNumber = PLAYBACKRATE_MIN;\n        } else if (valueNumber > PLAYBACKRATE_MAX) {\n          valueNumber = PLAYBACKRATE_MAX;\n        }\n\n        valueNumber /= PLAYBACKRATE_SCALE;\n        newValueStr = roundPlaybackRate(valueNumber);\n\n        if (video) {\n          video.playbackRate = valueNumber;\n        }\n      }\n\n      setPlaybackRate(newValueStr);\n      localStorage.setItem(PLAYBACK_RATE, newValueStr);\n    },\n    [video],\n  );\n\n  const addToPlaybackRate = useCallback(\n    (delta: number) => {\n      if (video) {\n        delta = Math.ceil(delta);\n        const value =\n          Math.round(video.playbackRate * PLAYBACKRATE_SCALE + delta) /\n          PLAYBACKRATE_SCALE;\n        updatePlaybackRate(value.toString());\n      }\n    },\n    [updatePlaybackRate, video],\n  );\n\n  return {\n    addToPlaybackRate,\n    playbackRate,\n    setPlaybackRate,\n    updatePlaybackRate,\n  };\n}\n","import { WheelShortcuts, handleWheelShortcuts } from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseWheelShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n}\n\ntype OnWheelEvent = (e: WheelEvent) => void;\n\nexport default function useWheelShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n}: IUseWheelShortcuts): OnWheelEvent {\n  const xWheel = useCallback(\n    (val: number) => {\n      addToCurrentTime(TRAVEL_DISTANCE * (val / 1000));\n    },\n    [addToCurrentTime],\n  );\n\n  const yWheel = useCallback(\n    (val: number) => {\n      addToPlaybackRate(PLAYBACKRATE_STEP * -(val / 100));\n    },\n    [addToPlaybackRate],\n  );\n\n  const onWheel = useCallback(\n    (e: WheelEvent) => {\n      const wheelShortcuts: WheelShortcuts = {\n        x: xWheel,\n        y: yWheel,\n      };\n\n      handleWheelShortcuts(e, wheelShortcuts);\n    },\n    [xWheel, yWheel],\n  );\n\n  return onWheel;\n}\n","import { useEffect } from \"react\";\n\nexport default function useMediaSession(\n  metadata: Partial<MediaMetadataInit>,\n): void {\n  useEffect(() => {\n    if (\"mediaSession\" in navigator && navigator.mediaSession) {\n      navigator.mediaSession.metadata = new MediaMetadata(metadata);\n    }\n  }, [metadata]);\n}\n","import React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport {\n  ThemeProvider,\n  createMuiTheme,\n  useMediaQuery,\n} from \"@material-ui/core\";\n\nimport Video from \"./components/Video\";\n\nexport default function App(): JSX.Element {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  const [src, setSrc] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectVideo = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.currentTarget.files?.length) {\n        const file = e.currentTarget.files[0];\n        setTitle(file.name);\n        URL.revokeObjectURL(src);\n        const objectURL = URL.createObjectURL(file);\n        setSrc(objectURL);\n      }\n    },\n    [src]\n  );\n\n  const selectSrc = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ backgroundColor: theme.palette.background.default }}>\n        <input\n          aria-label=\"Press Ctrl+O to open a video from the local filesystem\"\n          ref={inputRef}\n          type=\"file\"\n          accept=\"video/*\"\n          onChange={onSelectVideo}\n          style={{ display: \"none\" }}\n        />\n        <Video src={src} selectSrc={selectSrc} title={title} />\n      </div>\n    </ThemeProvider>\n  );\n}\n"],"sourceRoot":""}