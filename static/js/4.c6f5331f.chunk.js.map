{"version":3,"sources":["components/MuteButton/MuteButton.tsx","components/Play/PlayButton.tsx","components/PlaybackRate/PlaybackRate.tsx","components/PlaybackRate/utils.ts","utils.ts","components/Seeker/ValueLabelComponent.tsx","components/Seeker/Seeker.tsx","components/Label/Label.tsx","components/Video/useStatistics.ts","components/StatisticsPanel/StatisticsPanel.tsx","components/StatisticsPanel/constants.ts","components/StatisticsButton/StatisticsButton.tsx","components/VideoControls/VideoControls.tsx","components/VideoTitle/VideoTitle.tsx","components/Video/handleVideoShortcuts.ts","components/Video/useKeyboardShortcuts.ts","components/Video/utils.ts","components/Video/Video.tsx","components/Video/usePause.ts","components/Video/useMute.ts","components/Video/useCurrentTime.ts","components/Video/usePlaybackRate.ts","components/Video/useWheelShortcuts.ts","App.tsx"],"names":["MuteButton","isMuted","toggleMuted","audibleIcon","useMemo","VolumeMute","VolumeUp","IconButton","aria-label","onClick","PlayButton","isPaused","togglePaused","playPauseIcon","PlayArrow","Pause","useStyles","makeStyles","root","padding","PlaybackRate","value","updateValue","styles","onChange","useCallback","e","currentTarget","onBlur","rate","parseFloat","isNaN","TextField","className","type","inputProps","step","getTime","Date","toISOString","substr","ValueLabelComponent","children","open","time","Tooltip","enterTouchDelay","placement","title","Seeker","currentTime","duration","updateCurrentTime","onRangeChange","Array","isArray","getValue","Slider","defaultValue","max","disabled","Label","theme","useTheme","Typography","style","color","palette","text","primary","TOP","LEFT","getMiddle","windowSize","panelHeight","panelWidth","halfPanelHeight","Math","floor","halfPanelWidth","top","innerHeight","left","innerWidth","getKey","key","localStorage","getItem","float","update","setItem","toString","useStatistics","useState","isStatsVisible","setIsStatsVisible","toggleIsStatsVisible","useWindowSize","getStoredPosition","position","getPositionInsideView","updatePosition","StatisticsVisible","React","createContext","ToggleStatisticsVisible","StatisticsPosition","window","outerHeight","outerWidth","STATS_PANEL_HEIGHT","STATS_PANEL_WIDTH","UpdateStatisticsPosition","width","closeButton","StatisticsPanel","playbackRate","now","remainingTime","remainingAtRate","watchStartTime","nodeRef","useRef","isVisible","useContext","toggleIsVisible","renderedPosition","zIndex","setZIndex","useEffect","watchingFor","onStop","current","getBoundingClientRect","bounds","ref","Card","opacity","CardContent","Close","Table","size","TableBody","TableRow","TableCell","dateTime","d","setUTCMilliseconds","moment","format","getEpochTimeString","StatisticsButton","icon","CancelPresentation","PresentToAll","VIDEO_CONTROLS_HEIGHT","height","display","alignContent","flexDirection","seeker","alignItems","justifyContent","interactiveRoot","interactiveRootLeft","VideoControls","updatePlaybackRate","setTime","setNow","setRemainingTime","setRemainingAtRate","remaining","interval","setInterval","clearInterval","VideoTitle","variant","keyboardMatch","shortcut","ctrlKey","useKeyboardShortcuts","addToCurrentTime","addToPlaybackRate","selectSrc","keyboardShortcuts","onKeyDown","shortcuts","preventDefault","handleKeyboardShortcuts","video","Video","src","videoRef","setWatchStartTime","isVideoLoaded","setIsVideoLoaded","setDuration","videoLoaded","setIsPaused","play","pause","onPause","onPlay","usePause","setIsMuted","useMute","setCurrentTime","isEvent","delta","onTimeUpdate","useCurrentTime","setPlaybackRate","recvValueStr","newValueStr","valueNumber","ceil","round","usePlaybackRate","statsPosition","updateStatsPosition","useEventListener","document","onWheel","wheelShortcuts","x","val","y","deltaX","deltaY","handleWheelShortcuts","useWheelShortcuts","passive","onLoadedMetadata","muted","Provider","App","prefersDarkMode","useMediaQuery","createMuiTheme","setSrc","setTitle","inputRef","onSelectVideo","files","length","file","name","URL","revokeObjectURL","objectURL","createObjectURL","click","ThemeProvider","backgroundColor","background","default","accept"],"mappings":"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","file":"static/js/4.c6f5331f.chunk.js","sourcesContent":["import React, { useMemo } from \"react\";\nimport { VolumeMute, VolumeUp } from \"@material-ui/icons\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isMuted: boolean;\n  toggleMuted: () => void;\n}\n\nexport default function MuteButton({\n  isMuted,\n  toggleMuted,\n}: IPlayButton): JSX.Element {\n  const audibleIcon = useMemo(() => {\n    return isMuted ? <VolumeMute /> : <VolumeUp />;\n  }, [isMuted]);\n\n  return (\n    <IconButton aria-label=\"Toggle muted\" onClick={toggleMuted}>\n      {audibleIcon}\n    </IconButton>\n  );\n}\n","import { Pause, PlayArrow } from \"@material-ui/icons\";\nimport React, { useMemo } from \"react\";\n\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IPlayButton {\n  isPaused: boolean;\n  togglePaused: () => void;\n}\n\nexport default function PlayButton({\n  isPaused,\n  togglePaused,\n}: IPlayButton): JSX.Element {\n  const playPauseIcon = useMemo(() => {\n    return isPaused ? <PlayArrow /> : <Pause />;\n  }, [isPaused]);\n\n  return (\n    <IconButton aria-label=\"Toggle paused\" onClick={togglePaused}>\n      {playPauseIcon}\n    </IconButton>\n  );\n}\n","import React, { useCallback } from \"react\";\nimport { TextField, makeStyles } from \"@material-ui/core\";\n\nimport { PLAYBACKRATE_STEP } from \"./utils\";\n\nexport interface IPlaybackRate {\n  value: string;\n  updateValue: (value: string) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 16,\n  },\n});\n\nexport default function PlaybackRate({\n  value,\n  updateValue,\n}: IPlaybackRate): JSX.Element {\n  const styles = useStyles();\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n      updateValue(e.currentTarget.value);\n    },\n    [updateValue]\n  );\n\n  const onBlur = useCallback(() => {\n    const rate = parseFloat(value);\n    if (isNaN(rate)) {\n      updateValue(\"1.0\");\n    }\n  }, [updateValue, value]);\n\n  return (\n    <TextField\n      className={styles.root}\n      aria-label=\"Video playback rate\"\n      type=\"number\"\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n      inputProps={{\n        step: PLAYBACKRATE_STEP,\n        \"aria-label\": \"Video playback rate\",\n      }}\n    />\n  );\n}\n","export const PLAYBACKRATE_SCALE = 10;\nexport const PLAYBACKRATE_STEP = 0.1 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MIN = 0.4 * PLAYBACKRATE_SCALE;\nexport const PLAYBACKRATE_MAX = 3 * PLAYBACKRATE_SCALE;\n\nexport function roundPlaybackRate(value: number) {\n  let valueStr = value.toString();\n  return valueStr;\n}\n","import moment from \"moment\";\n\n/**\n * Gets the time as a string from the number of seconds.\n * @param value Number of seconds\n */\nexport function getTime(value: number) {\n  return new Date(value * 1000).toISOString().substr(11, 8);\n}\n\n/**\n * Gets the time as a string of the datetime from the number of milliseconds\n * from the UNIX epoch.\n * @param dateTime The number of milliseconds from the UNIX epoch.\n */\nexport function getEpochTimeString(dateTime: number): string {\n  const d = new Date(0);\n  d.setUTCMilliseconds(dateTime);\n  return moment(d).format(\"HH:MM:SS\");\n}\n","import React from \"react\";\nimport { Tooltip } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\n\nexport interface IValueLabelComponentProps {\n  children: React.ReactElement;\n  open: boolean;\n  value: number;\n}\n\nexport default function ValueLabelComponent({\n  children,\n  open,\n  value,\n}: IValueLabelComponentProps): JSX.Element {\n  const time = getTime(value);\n  return (\n    <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={time}>\n      {children}\n    </Tooltip>\n  );\n}\n","import React, { useCallback } from \"react\";\n\nimport { Slider } from \"@material-ui/core\";\nimport ValueLabelComponent from \"./ValueLabelComponent\";\n\nexport interface ISeeker {\n  className?: string;\n  currentTime: number;\n  duration: number;\n  updateCurrentTime: (value: number) => void;\n}\n\nfunction getValue(value: number | number[]) {\n  if (Array.isArray(value)) {\n    return value[0] || 0;\n  }\n  return value;\n}\n\nexport default function Seeker({\n  className,\n  currentTime,\n  duration,\n  updateCurrentTime,\n}: ISeeker): JSX.Element {\n  const onRangeChange = useCallback(\n    (e: any, value: number | number[]) => {\n      updateCurrentTime(getValue(value));\n    },\n    [updateCurrentTime]\n  );\n\n  return (\n    <Slider\n      className={className}\n      value={currentTime}\n      defaultValue={0}\n      max={duration}\n      onChange={onRangeChange}\n      disabled={duration === 0}\n      ValueLabelComponent={ValueLabelComponent}\n    />\n  );\n}\n","import { Typography, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface ILabel {\n  children: string | string[];\n}\n\nexport default function Label({ children }: ILabel): JSX.Element {\n  const theme = useTheme();\n\n  return (\n    <Typography style={{ color: theme.palette.text.primary, padding: 8 }}>\n      {children}\n    </Typography>\n  );\n}\n","import { useState, useCallback } from \"react\";\nimport useWindowSize, { WindowSize } from \"@rehooks/window-size\";\nimport React from \"react\";\nimport { STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH } from \"../StatisticsPanel\";\n\nconst TOP = \"statistics.position.top\";\nconst LEFT = \"statistics.position.left\";\n\nexport interface Position {\n  top: number;\n  left: number;\n}\n\nconst getMiddle = (\n  windowSize: WindowSize,\n  panelHeight: number,\n  panelWidth: number\n): Position => {\n  const halfPanelHeight = Math.floor(panelHeight / 2);\n  const halfPanelWidth = Math.floor(panelWidth / 2);\n\n  const halfWindowHeight = Math.floor(windowSize.innerHeight / 2);\n  const halfWindowWidth = Math.floor(windowSize.innerWidth / 2);\n\n  return {\n    top: halfWindowHeight - halfPanelHeight,\n    left: halfWindowWidth - halfPanelWidth,\n  };\n};\n\nconst getKey = (key: string): number | null => {\n  const value = localStorage.getItem(key);\n  if (value === null) {\n    return null;\n  }\n\n  const float = parseFloat(value);\n  if (isNaN(float)) {\n    return null;\n  }\n\n  return float;\n};\n\nconst update = ({ top, left }: Position) => {\n  localStorage.setItem(TOP, top.toString());\n  localStorage.setItem(LEFT, left.toString());\n};\n\nconst getPositionInsideView = (\n  { innerHeight, innerWidth }: WindowSize,\n  panelHeight: number,\n  panelWidth: number,\n  position: Position\n) => {\n  position = { ...position };\n\n  if (position.top < 0) {\n    // Above\n    position.top = 0;\n  } else if (position.top + panelHeight > innerHeight) {\n    // Bottom\n    position.top = innerHeight - panelHeight;\n  }\n\n  if (position.left < 0) {\n    // Left\n    position.left = 0;\n  } else if (position.left + panelWidth > innerWidth) {\n    // Right\n    position.left = innerWidth - panelWidth;\n  }\n\n  return position;\n};\n\nexport default function useStatistics(panelHeight: number, panelWidth: number) {\n  // Visibility\n  const [isStatsVisible, setIsStatsVisible] = useState(true);\n\n  const toggleIsStatsVisible = useCallback(() => {\n    setIsStatsVisible(!isStatsVisible);\n  }, [isStatsVisible]);\n\n  // Location\n  const windowSize = useWindowSize();\n\n  const getStoredPosition = useCallback((): Position => {\n    const top = getKey(TOP);\n    const left = getKey(LEFT);\n\n    if (top === null || left === null) {\n      const position = getMiddle(windowSize, panelHeight, panelWidth);\n      update(position);\n      return position;\n    }\n\n    const position = getPositionInsideView(\n      windowSize,\n      panelHeight,\n      panelWidth,\n      { top, left }\n    );\n\n    return position;\n  }, [windowSize, panelHeight, panelWidth]);\n\n  const updatePosition = useCallback((top: number, left: number) => {\n    update({ top, left });\n  }, []);\n\n  return {\n    isStatsVisible,\n    toggleIsStatsVisible,\n    position: getStoredPosition(),\n    updatePosition,\n  };\n}\n\nexport const StatisticsVisible = React.createContext(false);\nexport const ToggleStatisticsVisible = React.createContext(() => {});\n\nexport const StatisticsPosition = React.createContext(\n  getMiddle(\n    {\n      innerHeight: window.innerHeight,\n      innerWidth: window.innerWidth,\n      outerHeight: window.outerHeight,\n      outerWidth: window.outerWidth,\n    },\n    STATS_PANEL_HEIGHT,\n    STATS_PANEL_WIDTH\n  )\n);\nexport const UpdateStatisticsPosition = React.createContext(\n  (top: number, left: number) => {}\n);\n","import React, {\n  useRef,\n  useMemo,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport Draggable, { DraggableEvent } from \"react-draggable\";\nimport {\n  makeStyles,\n  Card,\n  CardContent,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n  IconButton,\n} from \"@material-ui/core\";\nimport { getTime, getEpochTimeString } from \"../../utils\";\nimport { Close } from \"@material-ui/icons\";\nimport {\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n  StatisticsPosition,\n  UpdateStatisticsPosition,\n} from \"../Video/useStatistics\";\n\nexport interface IStatisticsPanel {\n  time: string;\n  duration: string;\n  playbackRate: string;\n  now: number;\n  remainingTime: string;\n  remainingAtRate: string;\n  watchStartTime: number;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: \"absolute\",\n    width: 400,\n  },\n  closeButton: {\n    float: \"right\",\n  },\n});\n\nexport default function StatisticsPanel({\n  time,\n  duration,\n  playbackRate,\n  now,\n  remainingTime,\n  remainingAtRate,\n  watchStartTime,\n}: IStatisticsPanel): JSX.Element {\n  const styles = useStyles();\n  const nodeRef = useRef<HTMLSpanElement | null>(null);\n\n  const isVisible = useContext(StatisticsVisible);\n  const toggleIsVisible = useContext(ToggleStatisticsVisible);\n  const position = useContext(StatisticsPosition);\n  const updatePosition = useContext(UpdateStatisticsPosition);\n\n  const [renderedPosition] = useState({ ...position });\n  const [zIndex, setZIndex] = useState(-1);\n\n  useEffect(() => {\n    if (isVisible) {\n      setZIndex(100);\n    } else {\n      setZIndex(-1);\n    }\n  }, [isVisible, position, zIndex]);\n\n  const watchingFor = useMemo(() => {\n    return getTime((now - watchStartTime) / 1000);\n  }, [now, watchStartTime]);\n\n  const onStop = useCallback(\n    (e: DraggableEvent) => {\n      if (nodeRef.current) {\n        const { top, left } = nodeRef.current.getBoundingClientRect();\n        updatePosition(top, left);\n      }\n    },\n    [updatePosition]\n  );\n\n  return (\n    <Draggable nodeRef={nodeRef} bounds=\"body\" onStop={onStop}>\n      <span\n        ref={nodeRef}\n        className={styles.root}\n        style={{ zIndex, ...renderedPosition }}\n      >\n        <Card style={{ opacity: 0.8 }}>\n          <CardContent>\n            <IconButton\n              aria-label=\"Close statistics panel\"\n              className={styles.closeButton}\n              onClick={toggleIsVisible}\n            >\n              <Close />\n            </IconButton>\n            <Table size=\"small\">\n              <TableBody>\n                <TableRow>\n                  <TableCell>Current time</TableCell>\n                  <TableCell>{time}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Duration</TableCell>\n                  <TableCell>{duration}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Playback rate</TableCell>\n                  <TableCell>{playbackRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining time</TableCell>\n                  <TableCell>{remainingTime}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Remaining at ×{playbackRate}</TableCell>\n                  <TableCell>{remainingAtRate}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watch start time</TableCell>\n                  <TableCell>{getEpochTimeString(watchStartTime)}</TableCell>\n                </TableRow>\n                <TableRow>\n                  <TableCell>Watching for</TableCell>\n                  <TableCell>{watchingFor}</TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </span>\n    </Draggable>\n  );\n}\n","export const STATS_PANEL_HEIGHT = 319;\nexport const STATS_PANEL_WIDTH = 400;\n","import React, { useMemo } from \"react\";\nimport { CancelPresentation, PresentToAll } from \"@material-ui/icons\";\nimport { IconButton } from \"@material-ui/core\";\n\nexport interface IStatisticsButton {\n  isVisible: boolean;\n  toggleIsVisible: () => void;\n}\n\nexport default function StatisticsButton({\n  isVisible,\n  toggleIsVisible,\n}: IStatisticsButton): JSX.Element {\n  const icon = useMemo(() => {\n    return isVisible ? <CancelPresentation /> : <PresentToAll />;\n  }, [isVisible]);\n\n  return (\n    <IconButton aria-label=\"Toggle statistics\" onClick={toggleIsVisible}>\n      {icon}\n    </IconButton>\n  );\n}\n","import MuteButton from \"../MuteButton\";\nimport PlayButton from \"../Play\";\nimport PlaybackRate from \"../PlaybackRate\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport Seeker from \"../Seeker\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { getTime } from \"../../utils\";\nimport Label from \"../Label\";\nimport StatisticsPanel from \"../StatisticsPanel\";\nimport StatisticsButton from \"../StatisticsButton\";\nimport {\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n} from \"../Video/useStatistics\";\n\nexport interface IVideoControls {\n  duration: number;\n  currentTime: number;\n  isPaused: boolean;\n  togglePaused: () => void;\n  isMuted: boolean;\n  toggleMuted: () => void;\n  updateCurrentTime: (value: number) => void;\n  playbackRate: string;\n  updatePlaybackRate: (value: string) => void;\n  watchStartTime: number;\n}\n\nconst height = 90;\nconst padding = 16;\nexport const VIDEO_CONTROLS_HEIGHT = `${padding * 2 + height}px`;\n\nconst useStyles = makeStyles({\n  root: {\n    height,\n    display: \"flex\",\n    alignContent: \"center\",\n    flexDirection: \"column\",\n    padding,\n  },\n  seeker: {\n    alignItems: \"center\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRoot: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  interactiveRootLeft: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  },\n});\n\nexport default function VideoControls({\n  duration,\n  currentTime,\n  isPaused,\n  togglePaused,\n  isMuted,\n  toggleMuted,\n  updateCurrentTime,\n  playbackRate,\n  updatePlaybackRate,\n  watchStartTime,\n}: IVideoControls): JSX.Element {\n  const styles = useStyles();\n\n  const isStatsVisible = useContext(StatisticsVisible);\n  const toggleIsStatsVisible = useContext(ToggleStatisticsVisible);\n\n  const [time, setTime] = useState(\"00:00:00\");\n  const [now, setNow] = useState(0);\n  const [remainingTime, setRemainingTime] = useState(\"00:00:00\");\n  const [remainingAtRate, setRemainingAtRate] = useState(\"00:00:00\");\n\n  useEffect(() => {\n    setTime(getTime(currentTime));\n\n    const remaining = duration - currentTime;\n    setRemainingTime(getTime(remaining));\n\n    const rate = parseFloat(playbackRate) || 1;\n    setRemainingAtRate(getTime(remaining / rate));\n  }, [currentTime, duration, playbackRate, watchStartTime]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [watchStartTime]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.seeker}>\n        <Label>{time}</Label>\n        <Seeker\n          currentTime={currentTime}\n          duration={duration}\n          updateCurrentTime={updateCurrentTime}\n        />\n        <Label>\n          -{remainingTime}/{getTime(duration)}\n        </Label>\n      </div>\n\n      <div className={styles.interactiveRoot}>\n        <div className={styles.interactiveRootLeft}>\n          <PlayButton isPaused={isPaused} togglePaused={togglePaused} />\n          <MuteButton isMuted={isMuted} toggleMuted={toggleMuted} />\n          <StatisticsButton\n            isVisible={isStatsVisible}\n            toggleIsVisible={toggleIsStatsVisible}\n          />\n        </div>\n        <PlaybackRate value={playbackRate} updateValue={updatePlaybackRate} />\n      </div>\n      <StatisticsPanel\n        time={time}\n        duration={getTime(duration)}\n        playbackRate={playbackRate}\n        now={now}\n        remainingTime={remainingTime}\n        remainingAtRate={remainingAtRate}\n        watchStartTime={watchStartTime}\n      />\n    </div>\n  );\n}\n","import { Typography, makeStyles, useTheme } from \"@material-ui/core\";\n\nimport React from \"react\";\n\nexport interface IVideoTitle {\n  children?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    padding: \"16px\",\n  },\n});\n\n// NOTE: this is hard coded according to Typography\nexport const VIDEO_TITLE_HEIGHT = \"64px\";\n\nexport default function VideoTitle({ children }: IVideoTitle): JSX.Element {\n  const theme = useTheme();\n  const styles = useStyles();\n\n  return (\n    <Typography\n      variant=\"h6\"\n      style={{ color: theme.palette.text.primary }}\n      className={styles.root}\n    >\n      {children || \"Open a video file (Ctrl + O)\"}\n    </Typography>\n  );\n}\n","export interface KeyboardShortcut {\n  key: string;\n  ctrlKey?: boolean;\n  onKeyDown: () => void;\n}\n\nfunction keyboardMatch(e: KeyboardEvent, shortcut: KeyboardShortcut): boolean {\n  return (\n    e.key === shortcut.key &&\n    (!shortcut.ctrlKey || e.ctrlKey === shortcut.ctrlKey)\n  );\n}\n\nexport function handleKeyboardShortcuts(\n  e: KeyboardEvent,\n  shortcuts: KeyboardShortcut[]\n) {\n  for (const shortcut of shortcuts) {\n    if (keyboardMatch(e, shortcut)) {\n      shortcut.onKeyDown();\n      e.preventDefault();\n      return;\n    }\n  }\n}\n\nexport interface WheelShortcuts {\n  x: (val: number) => void;\n  y: (val: number) => void;\n}\n\nexport function handleWheelShortcuts(e: WheelEvent, shortcuts: WheelShortcuts) {\n  if (e.deltaX) {\n    shortcuts.x(e.deltaX);\n  }\n\n  if (e.deltaY) {\n    shortcuts.y(e.deltaY);\n  }\n}\n","import {\n  KeyboardShortcut,\n  handleKeyboardShortcuts,\n} from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseKeyboardShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n  selectSrc: () => void;\n  toggleMuted: () => void;\n  togglePaused: () => void;\n  toggleIsStatsVisible: () => void;\n}\n\nexport default function useKeyboardShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n  selectSrc,\n  toggleMuted,\n  togglePaused,\n  toggleIsStatsVisible: toggleStatistics,\n}: IUseKeyboardShortcuts) {\n  const leftArrow = () => addToCurrentTime(-TRAVEL_DISTANCE);\n\n  const rightArrow = () => addToCurrentTime(TRAVEL_DISTANCE);\n\n  const upArrow = () => addToPlaybackRate(PLAYBACKRATE_STEP);\n\n  const downArrow = () => addToPlaybackRate(-PLAYBACKRATE_STEP);\n\n  const keyboardShortcuts: KeyboardShortcut[] = [\n    { key: \"m\", onKeyDown: toggleMuted },\n    { key: \" \", onKeyDown: togglePaused },\n    { key: \"o\", ctrlKey: true, onKeyDown: selectSrc },\n    { key: \"s\", onKeyDown: toggleStatistics },\n    { key: \"ArrowLeft\", onKeyDown: leftArrow },\n    { key: \"ArrowRight\", onKeyDown: rightArrow },\n    { key: \"ArrowUp\", onKeyDown: upArrow },\n    { key: \"ArrowDown\", onKeyDown: downArrow },\n  ];\n\n  const onKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      handleKeyboardShortcuts(e, keyboardShortcuts);\n    },\n    [keyboardShortcuts]\n  );\n\n  return onKeyDown;\n}\n","export type Video = HTMLVideoElement | null;\nexport const TRAVEL_DISTANCE = 10;\n","import React, { useCallback, useRef, useState } from \"react\";\n\nimport { VIDEO_CONTROLS_HEIGHT } from \"../VideoControls/VideoControls\";\nimport { VIDEO_TITLE_HEIGHT } from \"../VideoTitle/VideoTitle\";\nimport VideoControls from \"../VideoControls\";\nimport VideoTitle from \"../VideoTitle\";\nimport { makeStyles } from \"@material-ui/core\";\nimport useCurrentTime from \"./useCurrentTime\";\nimport useEventListener from \"react-use-event-listener\";\nimport useKeyboardShortcuts from \"./useKeyboardShortcuts\";\nimport useMute from \"./useMute\";\nimport usePause from \"./usePause\";\nimport usePlaybackRate from \"./usePlaybackRate\";\nimport useWheelShortcuts from \"./useWheelShortcuts\";\nimport useStatistics, {\n  StatisticsVisible,\n  ToggleStatisticsVisible,\n  StatisticsPosition,\n  UpdateStatisticsPosition,\n} from \"./useStatistics\";\nimport { STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH } from \"../StatisticsPanel\";\n\nexport interface IVideo {\n  src?: string;\n  selectSrc: () => void;\n  title?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    // width: \"100vw\",\n    height: \"100vh\",\n  },\n  video: {\n    height:\n      `calc(100vh - ${VIDEO_TITLE_HEIGHT} ` +\n      `- ${VIDEO_CONTROLS_HEIGHT} - 10px)`,\n    width: \"100vw\",\n  },\n});\n\nexport default function Video({ src, selectSrc, title }: IVideo): JSX.Element {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const styles = useStyles();\n\n  const [watchStartTime, setWatchStartTime] = useState(0);\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\n  const [duration, setDuration] = useState(0);\n\n  const { isPaused, setIsPaused, togglePaused, onPause, onPlay } = usePause(\n    videoRef.current,\n    isVideoLoaded\n  );\n\n  const { isMuted, toggleMuted } = useMute(videoRef.current);\n\n  const {\n    currentTime,\n    onTimeUpdate,\n    updateCurrentTime,\n    addToCurrentTime,\n  } = useCurrentTime(videoRef.current, duration);\n\n  const {\n    playbackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  } = usePlaybackRate(videoRef.current);\n\n  const {\n    isStatsVisible,\n    toggleIsStatsVisible,\n    position: statsPosition,\n    updatePosition: updateStatsPosition,\n  } = useStatistics(STATS_PANEL_HEIGHT, STATS_PANEL_WIDTH);\n\n  // Keyboard shortcuts\n  const onKeyDown = useKeyboardShortcuts({\n    addToCurrentTime,\n    addToPlaybackRate,\n    selectSrc,\n    toggleMuted,\n    togglePaused,\n    toggleIsStatsVisible,\n  });\n  useEventListener(\"keydown\", onKeyDown, document);\n\n  // Wheel shortcuts\n  const onWheel = useWheelShortcuts({ addToCurrentTime, addToPlaybackRate });\n  useEventListener(\"wheel\", onWheel, document, { passive: true });\n\n  // On loaded\n  const onLoadedMetadata = useCallback(() => {\n    const video = videoRef.current;\n    setIsVideoLoaded(true);\n    setDuration(video?.duration || 0);\n    setWatchStartTime(Date.now());\n\n    // Play\n    setIsPaused(false);\n    video?.play();\n\n    // Playback rate\n    const rate = parseFloat(playbackRate);\n    if (!isNaN(rate) && video) {\n      video.playbackRate = rate;\n    }\n  }, [playbackRate, setIsPaused]);\n\n  return (\n    <div className={styles.root}>\n      <VideoTitle>{title}</VideoTitle>\n      <video\n        className={styles.video}\n        ref={videoRef}\n        src={src}\n        muted={isMuted}\n        onLoadedMetadata={onLoadedMetadata}\n        onTimeUpdate={onTimeUpdate}\n        onPause={onPause}\n        onPlay={onPlay}\n      />\n      <StatisticsVisible.Provider value={isStatsVisible}>\n        <ToggleStatisticsVisible.Provider value={toggleIsStatsVisible}>\n          <StatisticsPosition.Provider value={statsPosition}>\n            <UpdateStatisticsPosition.Provider value={updateStatsPosition}>\n              <VideoControls\n                isPaused={isPaused}\n                togglePaused={togglePaused}\n                isMuted={isMuted}\n                toggleMuted={toggleMuted}\n                duration={duration}\n                currentTime={currentTime}\n                updateCurrentTime={updateCurrentTime}\n                playbackRate={playbackRate}\n                updatePlaybackRate={updatePlaybackRate}\n                watchStartTime={watchStartTime}\n              />\n            </UpdateStatisticsPosition.Provider>\n          </StatisticsPosition.Provider>\n        </ToggleStatisticsVisible.Provider>\n      </StatisticsVisible.Provider>\n    </div>\n  );\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function usePause(video: Video, videoLoaded: boolean) {\n  const [isPaused, setIsPaused] = useState(true);\n\n  const togglePaused = useCallback(() => {\n    if (video && videoLoaded) {\n      if (isPaused) {\n        video.play();\n      } else {\n        video.pause();\n      }\n      setIsPaused(!isPaused);\n    }\n  }, [isPaused, video, videoLoaded]);\n\n  const onPause = useCallback(() => {\n    setIsPaused(true);\n  }, []);\n\n  const onPlay = useCallback(() => {\n    setIsPaused(false);\n  }, []);\n\n  return { isPaused, setIsPaused, togglePaused, onPause, onPlay };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function useMute(video: Video) {\n  const [isMuted, setIsMuted] = useState(false);\n\n  const toggleMuted = useCallback(() => {\n    setIsMuted(!isMuted);\n  }, [isMuted]);\n\n  return { isMuted, setIsMuted, toggleMuted };\n}\n","import { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\n\nexport default function useCurrentTime(video: Video, duration: number) {\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const updateCurrentTime = useCallback(\n    (value: number, isEvent = false) => {\n      if (video && !isEvent) {\n        video.currentTime = value;\n      }\n      setCurrentTime(value);\n    },\n    [video]\n  );\n\n  const addToCurrentTime = useCallback(\n    (delta: number) => {\n      if (video) {\n        let value = video.currentTime + delta;\n\n        if (value < 0) {\n          value = 0;\n        } else if (value > duration) {\n          value = duration;\n        }\n\n        updateCurrentTime(value);\n      }\n    },\n    [duration, updateCurrentTime, video]\n  );\n\n  const onTimeUpdate = useCallback(() => {\n    const time = video?.currentTime;\n    if (time) {\n      updateCurrentTime(time, true);\n    }\n  }, [updateCurrentTime, video]);\n\n  return {\n    currentTime,\n    setCurrentTime,\n    updateCurrentTime,\n    addToCurrentTime,\n    onTimeUpdate,\n  };\n}\n","import { PLAYBACKRATE_MAX, PLAYBACKRATE_MIN } from \"../PlaybackRate\";\nimport { useCallback, useState } from \"react\";\n\nimport { Video } from \"./utils\";\nimport { roundPlaybackRate, PLAYBACKRATE_SCALE } from \"../PlaybackRate/utils\";\n\nconst PLAYBACK_RATE = \"PLAYBACK_RATE\";\n\nexport default function usePlaybackRate(video: Video) {\n  const [playbackRate, setPlaybackRate] = useState(\n    localStorage.getItem(PLAYBACK_RATE) || \"1.0\"\n  );\n\n  /**\n   * @param valueStr Receives the real playback rate value\n   */\n  const updatePlaybackRate = useCallback(\n    (recvValueStr: string) => {\n      let valueNumber = parseFloat(recvValueStr) * PLAYBACKRATE_SCALE;\n      let newValueStr: string;\n\n      if (isNaN(valueNumber)) {\n        newValueStr = \"\";\n      } else {\n        if (valueNumber < PLAYBACKRATE_MIN) {\n          valueNumber = PLAYBACKRATE_MIN;\n        } else if (valueNumber > PLAYBACKRATE_MAX) {\n          valueNumber = PLAYBACKRATE_MAX;\n        }\n\n        valueNumber /= PLAYBACKRATE_SCALE;\n        newValueStr = roundPlaybackRate(valueNumber);\n\n        if (video) {\n          video.playbackRate = valueNumber;\n        }\n      }\n\n      setPlaybackRate(newValueStr);\n      localStorage.setItem(PLAYBACK_RATE, newValueStr);\n    },\n    [video]\n  );\n\n  const addToPlaybackRate = useCallback(\n    (delta: number) => {\n      if (video) {\n        delta = Math.ceil(delta);\n        let value =\n          Math.round(video.playbackRate * PLAYBACKRATE_SCALE + delta) /\n          PLAYBACKRATE_SCALE;\n        updatePlaybackRate(value.toString());\n      }\n    },\n    [updatePlaybackRate, video]\n  );\n\n  return {\n    playbackRate,\n    setPlaybackRate,\n    updatePlaybackRate,\n    addToPlaybackRate,\n  };\n}\n","import { WheelShortcuts, handleWheelShortcuts } from \"./handleVideoShortcuts\";\n\nimport { PLAYBACKRATE_STEP } from \"../PlaybackRate\";\nimport { TRAVEL_DISTANCE } from \"./utils\";\nimport { useCallback } from \"react\";\n\nexport interface IUseWheelShortcuts {\n  addToCurrentTime: (delta: number) => void;\n  addToPlaybackRate: (delta: number) => void;\n}\n\nexport default function useWheelShortcuts({\n  addToCurrentTime,\n  addToPlaybackRate,\n}: IUseWheelShortcuts) {\n  const xWheel = useCallback(\n    (val: number) => {\n      addToCurrentTime(TRAVEL_DISTANCE * (val / 1000));\n    },\n    [addToCurrentTime]\n  );\n\n  const yWheel = useCallback(\n    (val: number) => {\n      addToPlaybackRate(PLAYBACKRATE_STEP * -(val / 100));\n    },\n    [addToPlaybackRate]\n  );\n\n  const wheelShortcuts: WheelShortcuts = {\n    x: xWheel,\n    y: yWheel,\n  };\n\n  const onWheel = useCallback(\n    (e: WheelEvent) => {\n      handleWheelShortcuts(e, wheelShortcuts);\n    },\n    [wheelShortcuts]\n  );\n\n  return onWheel;\n}\n","import React, { useCallback, useMemo, useRef, useState } from \"react\";\nimport {\n  ThemeProvider,\n  createMuiTheme,\n  useMediaQuery,\n} from \"@material-ui/core\";\n\nimport Video from \"./components/Video\";\n\nexport default function App(): JSX.Element {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme: dark)\");\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? \"dark\" : \"light\",\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  const [src, setSrc] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const onSelectVideo = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      if (e.currentTarget.files?.length) {\n        const file = e.currentTarget.files[0];\n        setTitle(file.name);\n        URL.revokeObjectURL(src);\n        const objectURL = URL.createObjectURL(file);\n        setSrc(objectURL);\n      }\n    },\n    [src]\n  );\n\n  const selectSrc = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div style={{ backgroundColor: theme.palette.background.default }}>\n        <input\n          aria-label=\"Press Ctrl+O to open a video from the local filesystem\"\n          ref={inputRef}\n          type=\"file\"\n          accept=\"video/*\"\n          onChange={onSelectVideo}\n          style={{ display: \"none\" }}\n        />\n        <Video src={src} selectSrc={selectSrc} title={title} />\n      </div>\n    </ThemeProvider>\n  );\n}\n"],"sourceRoot":""}